[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 anon authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nash Delcamp. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Delcamp N (2025). anon: Anonymize Sensitive Data R Objects. R package version 0.0.0.9000.","code":"@Manual{,   title = {anon: Anonymize Sensitive Data in R Objects},   author = {Nash Delcamp},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"anon","dir":"","previous_headings":"","what":"Anonymize Sensitive Data in R Objects","title":"Anonymize Sensitive Data in R Objects","text":"anon package provides comprehensive tools anonymizing sensitive information R objects, including data frames, variable labels, lists, character/factor/numeric vectors.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Anonymize Sensitive Data in R Objects","text":"can install development version anon GitHub :","code":"# install.packages(\"pak\") pak::pak(\"nash-delcamp-slp/anon\")"},{"path":"/index.html","id":"loading-the-package","dir":"","previous_headings":"","what":"Loading the Package","title":"Anonymize Sensitive Data in R Objects","text":"Example data:","code":"library(anon) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union data(\"starwars\", package = \"dplyr\")  a_new_hope_intro <- c(   \"It is a period of civil war.\",    \"Rebel spaceships, striking from a hidden base, have won their first victory against the evil Galactic Empire.\",   \"During the battle, Rebel spies managed to steal secret plans to the Empire's ultimate weapon, the DEATH STAR, an armored space station with enough power to destroy an entire planet.\",   \"Pursued by the Empire's sinister agents, Princess Leia races home aboard her starship, custodian of the stolen plans that can save her people and restore freedom to the galaxy....\" )"},{"path":"/index.html","id":"core-anonymization-with-anon","dir":"","previous_headings":"","what":"Core Anonymization with anon()","title":"Anonymize Sensitive Data in R Objects","text":"main anon() function helper anon_*() support anonymization various R objects.","code":""},{"path":"/index.html","id":"vector-anonymization","dir":"","previous_headings":"Core Anonymization with anon()","what":"Vector Anonymization","title":"Anonymize Sensitive Data in R Objects","text":"","code":"# Character sequence anonymization - preserves unique mappings names_vector <- c(\"John\", \"Paul\", \"John\", \"Keith\") anon_id_chr_sequence(names_vector) #> [1] \"ID 1\" \"ID 2\" \"ID 1\" \"ID 3\"  # Numeric sequence anonymization anon_id_num_sequence(starwars$name) |>    head() #> [1] 1 2 3 4 5 6  # Preserve distribution while anonymizing values anon_num_preserve_distribution(starwars$height) |>    head() #> [1] 183.0 174.0 138.0  66.0 189.5 177.5  # Group numeric values into ranges anon_num_range(starwars$mass, n_breaks = 10) |>    head() #> [1] \"[0,100)\"   \"[0,100)\"   \"[0,100)\"   \"[100,200)\" \"[0,100)\"   \"[100,200)\""},{"path":"/index.html","id":"data-frame-anonymization","dir":"","previous_headings":"Core Anonymization with anon()","what":"Data Frame Anonymization","title":"Anonymize Sensitive Data in R Objects","text":"","code":"anon_starwars <- starwars |>    anon(     # Pattern-based text replacement     pattern_list = list(       DARK = c(\"empire\", \"imperials?\", \"sith\"),       LIGHT = c(\"jedi\", \"rebels?\")     ),     # Column-specific anonymization rules     df_variable_names = list(       name = anon_id_chr_sequence,       homeworld = ~ anon_id_chr_sequence(.x, start = \"Planet \")     ),     # Class-based anonymization rules     df_classes = list(       integer = ~ anon_num_range(.x, n_breaks = 10),       numeric = anon_num_preserve_distribution     )   )  glimpse(anon_starwars) #> Rows: 87 #> Columns: 14 #> $ name       <chr> \"ID 01\", \"ID 02\", \"ID 03\", \"ID 04\", \"ID 05\", \"ID 06\", \"ID 0… #> $ height     <chr> \"[160,180)\", \"[160,180)\", \"[80,100)\", \"[200,220)\", \"[140,16… #> $ mass       <dbl> 88, 66, 57, 58, 136, 15, 66, 57, 80, 88, 80, NA, 77, 69, 90… #> $ hair_color <chr> \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N… #> $ skin_color <chr> \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"… #> $ eye_color  <chr> \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",… #> $ birth_year <dbl> 35.5, 200.0, 31.5, 43.0, 35.5, 73.0, 600.0, NA, 54.0, 22.0,… #> $ sex        <chr> \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",… #> $ gender     <chr> \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini… #> $ homeworld  <chr> \"Planet 01\", \"Planet 01\", \"Planet 02\", \"Planet 01\", \"Planet… #> $ species    <chr> \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma… #> $ films      <list> <\"A New Hope\", \"The DARK Strikes Back\", \"Return of the LIG… #> $ vehicles   <list> <\"Snowspeeder\", \"DARK Speeder Bike\">, <>, <>, <>, \"DARK Sp… #> $ starships  <list> <\"X-wing\", \"DARK shuttle\">, <>, <>, \"TIE Advanced x1\", <>,…"},{"path":"/index.html","id":"global-options-system","dir":"","previous_headings":"","what":"Global Options System","title":"Anonymize Sensitive Data in R Objects","text":"Many functions anon package reference global options make easy configure default behaviors anonymization across workflows.","code":""},{"path":"/index.html","id":"setting-default-patterns--replacements","dir":"","previous_headings":"Global Options System","what":"Setting Default Patterns & Replacements","title":"Anonymize Sensitive Data in R Objects","text":"Set anon.pattern_list global option define patterns always replaced. default options applied provided arguments. Reset option:","code":"options(   anon.pattern_list = list(     DARK = c(\"empire\", \"imperials?\", \"sith\"),     LIGHT = c(\"jedi\", \"rebels?\")   ) ) anon(a_new_hope_intro) #> [1] \"It is a period of civil war.\"                                                                                                                                                        #> [2] \"LIGHT spaceships, striking from a hidden base, have won their first victory against the evil Galactic DARK.\"                                                                         #> [3] \"During the battle, LIGHT spies managed to steal secret plans to the DARK's ultimate weapon, the DEATH STAR, an armored space station with enough power to destroy an entire planet.\" #> [4] \"Pursued by the DARK's sinister agents, Princess Leia races home aboard her starship, custodian of the stolen plans that can save her people and restore freedom to the galaxy....\" anon(   a_new_hope_intro,    pattern_list = list(\"good guy\" = \"rebel\") ) #> [1] \"It is a period of civil war.\"                                                                                                                                                           #> [2] \"good guy spaceships, striking from a hidden base, have won their first victory against the evil Galactic DARK.\"                                                                         #> [3] \"During the battle, good guy spies managed to steal secret plans to the DARK's ultimate weapon, the DEATH STAR, an armored space station with enough power to destroy an entire planet.\" #> [4] \"Pursued by the DARK's sinister agents, Princess Leia races home aboard her starship, custodian of the stolen plans that can save her people and restore freedom to the galaxy....\" options(anon.pattern_list = NULL)"},{"path":"/index.html","id":"setting-default-data-frame-behavior","dir":"","previous_headings":"Global Options System","what":"Setting Default Data Frame Behavior","title":"Anonymize Sensitive Data in R Objects","text":"Set anon.df_variable_names anon.df_classes automatically replace content constant result function. Reset options:","code":"options(   anon.df_variable_names = list(     name = anon_id_chr_sequence,     homeworld = ~ anon_id_chr_sequence(.x, start = \"Planet \")   ),   anon.df_classes = list(     integer = ~ anon_num_range(.x, n_breaks = 10),     numeric = anon_num_preserve_distribution   ) )  starwars |>    anon() |>    glimpse() #> Rows: 87 #> Columns: 14 #> $ name       <chr> \"ID 01\", \"ID 02\", \"ID 03\", \"ID 04\", \"ID 05\", \"ID 06\", \"ID 0… #> $ height     <chr> \"[160,180)\", \"[160,180)\", \"[80,100)\", \"[200,220)\", \"[140,16… #> $ mass       <dbl> 113.0, 48.0, 82.0, 76.0, 40.0, 80.0, 48.0, 82.0, 85.0, 113.… #> $ hair_color <chr> \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N… #> $ skin_color <chr> \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"… #> $ eye_color  <chr> \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",… #> $ birth_year <dbl> 53.50, 600.00, 52.00, 43.00, 53.50, 47.00, 112.00, NA, 52.0… #> $ sex        <chr> \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",… #> $ gender     <chr> \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini… #> $ homeworld  <chr> \"Planet 01\", \"Planet 01\", \"Planet 02\", \"Planet 01\", \"Planet… #> $ species    <chr> \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma… #> $ films      <list> <\"A New Hope\", \"The Empire Strikes Back\", \"Return of the J… #> $ vehicles   <list> <\"Snowspeeder\", \"Imperial Speeder Bike\">, <>, <>, <>, \"Imp… #> $ starships  <list> <\"X-wing\", \"Imperial shuttle\">, <>, <>, \"TIE Advanced x1\",… options(   anon.df_variable_names = NULL,    anon.df_classes = NULL )"},{"path":"/index.html","id":"setting-default-replacements","dir":"","previous_headings":"Global Options System","what":"Setting Default Replacements","title":"Anonymize Sensitive Data in R Objects","text":"Set anon.default_replacement global option define fallback replacement. Reset option:","code":"options(anon.default_replacement = \"[HIDDEN]\")  anon(   a_new_hope_intro,   pattern_list = list(\"empire\", \"imperials?\", \"sith\", \"jedi\", \"rebels?\") ) #> [1] \"It is a period of civil war.\"                                                                                                                                                               #> [2] \"[HIDDEN] spaceships, striking from a hidden base, have won their first victory against the evil Galactic [HIDDEN].\"                                                                         #> [3] \"During the battle, [HIDDEN] spies managed to steal secret plans to the [HIDDEN]'s ultimate weapon, the DEATH STAR, an armored space station with enough power to destroy an entire planet.\" #> [4] \"Pursued by the [HIDDEN]'s sinister agents, Princess Leia races home aboard her starship, custodian of the stolen plans that can save her people and restore freedom to the galaxy....\" options(anon.default_replacement = NULL)"},{"path":"/index.html","id":"setting-default-nlp-entity-replacements","dir":"","previous_headings":"Global Options System","what":"Setting Default NLP Entity Replacements","title":"Anonymize Sensitive Data in R Objects","text":"Set anon.nlp_default_replacements global option define replacement values different entity types. Use nlp_default_replacements() create list input option. Reset option:","code":"# View the default replacement values for all entity types str(nlp_default_replacements()) #> List of 19 #>  $ cardinal   : chr \"[CARDINAL]\" #>  $ date       : chr \"[DATE]\" #>  $ event      : chr \"[EVENT]\" #>  $ fac        : chr \"[FAC]\" #>  $ gpe        : chr \"[GPE]\" #>  $ language   : chr \"[LANGUAGE]\" #>  $ law        : chr \"[LAW]\" #>  $ loc        : chr \"[LOC]\" #>  $ money      : chr \"[MONEY]\" #>  $ norp       : chr \"[NORP]\" #>  $ ordinal    : chr \"[ORDINAL]\" #>  $ org        : chr \"[ORG]\" #>  $ percent    : chr \"[PERCENT]\" #>  $ person     : chr \"[PERSON]\" #>  $ product    : chr \"[PRODUCT]\" #>  $ quantity   : chr \"[QUANTITY]\" #>  $ time       : chr \"[TIME]\" #>  $ work_of_art: chr \"[WORK_OF_ART]\" #>  $ propn      : chr \"[PROPN]\"  # Customize specific replacements my_replacements <- nlp_default_replacements(   person = \"[NAME]\",   org = \"[GROUP]\",    gpe = \"[LOCATION]\",   propn = \"[PROPER_NOUN]\" )  options(anon.nlp_default_replacements = my_replacements)  anon_nlp_entities(a_new_hope_intro) #> [1] \"It is a period of civil war.\"                                                                                                                                                                                          #> [2] \"[PROPER_NOUN] spaceships, striking from a hidden base, have won their [ORDINAL] victory against the evil [PROPER_NOUN] [PROPER_NOUN].\"                                                                                 #> [3] \"During the battle, [PROPER_NOUN] spies managed to steal secret plans to the [PROPER_NOUN]'s ultimate weapon, the [PROPER_NOUN] [PROPER_NOUN], an armored space station with enough power to destroy an entire planet.\" #> [4] \"Pursued by the [PROPER_NOUN]'s sinister agents, [PROPER_NOUN] [PROPER_NOUN] races home aboard her [PROPER_NOUN]ship, custodian of the stolen plans that can save her people and restore freedom to the galaxy....\" options(anon.nlp_default_replacements = NULL)"},{"path":"/index.html","id":"enabling-automatic-nlp-entity-anonymization","dir":"","previous_headings":"Global Options System","what":"Enabling Automatic NLP Entity Anonymization","title":"Anonymize Sensitive Data in R Objects","text":"Set anon.nlp_auto global option control entity types automatically anonymized. Use nlp_auto() create list input option. Reset option:","code":"# View default auto-anonymization settings (all FALSE by default) str(nlp_auto()) #> List of 19 #>  $ cardinal   : logi FALSE #>  $ date       : logi FALSE #>  $ event      : logi FALSE #>  $ fac        : logi FALSE #>  $ gpe        : logi FALSE #>  $ language   : logi FALSE #>  $ law        : logi FALSE #>  $ loc        : logi FALSE #>  $ money      : logi FALSE #>  $ norp       : logi FALSE #>  $ ordinal    : logi FALSE #>  $ org        : logi FALSE #>  $ percent    : logi FALSE #>  $ person     : logi FALSE #>  $ product    : logi FALSE #>  $ quantity   : logi FALSE #>  $ time       : logi FALSE #>  $ work_of_art: logi FALSE #>  $ propn      : logi FALSE  # Enable all entity types str(nlp_auto(default = TRUE)) #> List of 19 #>  $ cardinal   : logi TRUE #>  $ date       : logi TRUE #>  $ event      : logi TRUE #>  $ fac        : logi TRUE #>  $ gpe        : logi TRUE #>  $ language   : logi TRUE #>  $ law        : logi TRUE #>  $ loc        : logi TRUE #>  $ money      : logi TRUE #>  $ norp       : logi TRUE #>  $ ordinal    : logi TRUE #>  $ org        : logi TRUE #>  $ percent    : logi TRUE #>  $ person     : logi TRUE #>  $ product    : logi TRUE #>  $ quantity   : logi TRUE #>  $ time       : logi TRUE #>  $ work_of_art: logi TRUE #>  $ propn      : logi TRUE  # Enable only specific entity types my_auto_settings <- nlp_auto(person = TRUE, org = TRUE, gpe = TRUE, propn = TRUE) options(anon.nlp_auto = my_auto_settings)  anon(a_new_hope_intro) #> [1] \"It is a period of civil war.\"                                                                                                                                                                  #> [2] \"[PROPN] spaceships, striking from a hidden base, have won their first victory against the evil [PROPN] [PROPN].\"                                                                               #> [3] \"During the battle, [PROPN] spies managed to steal secret plans to the [PROPN]'s ultimate weapon, the [PROPN] [PROPN], an armored space station with enough power to destroy an entire planet.\" #> [4] \"Pursued by the [PROPN]'s sinister agents, [PROPN] [PROPN] races home aboard her [PROPN]ship, custodian of the stolen plans that can save her people and restore freedom to the galaxy....\" options(anon.nlp_auto = NULL)"},{"path":"/index.html","id":"automatic-nlp-powered-anonymization","dir":"","previous_headings":"","what":"Automatic NLP-Powered Anonymization","title":"Anonymize Sensitive Data in R Objects","text":"anon package includes powerful NLP functions can automatically detect anonymize different types named entities text.","code":""},{"path":"/index.html","id":"individual-nlp-functions","dir":"","previous_headings":"Automatic NLP-Powered Anonymization","what":"Individual NLP Functions","title":"Anonymize Sensitive Data in R Objects","text":"package provides specific functions different entity types: anon_nlp_entities(): Detect anonymize select entities. default, entities. anon_nlp_people(): Detect anonymize person names anon_nlp_organizations(): Detect anonymize organization names anon_nlp_places(): Detect anonymize locations (cities, countries, etc.) anon_nlp_dates(): Detect anonymize dates anon_nlp_numbers(): Detect anonymize monetary amounts percentages","code":"anon_nlp_entities(a_new_hope_intro) #> [1] \"It is a period of civil war.\"                                                                                                                                                                  #> [2] \"[PROPN] spaceships, striking from a hidden base, have won their [ORDINAL] victory against the evil [PROPN] [PROPN].\"                                                                           #> [3] \"During the battle, [PROPN] spies managed to steal secret plans to the [PROPN]'s ultimate weapon, the [PROPN] [PROPN], an armored space station with enough power to destroy an entire planet.\" #> [4] \"Pursued by the [PROPN]'s sinister agents, [PROPN] [PROPN] races home aboard her [PROPN]ship, custodian of the stolen plans that can save her people and restore freedom to the galaxy....\" anon_nlp_people(a_new_hope_intro) #> [1] \"It is a period of civil war.\"                                                                                                                                                          #> [2] \"Rebel spaceships, striking from a hidden base, have won their first victory against the evil Galactic Empire.\"                                                                         #> [3] \"During the battle, Rebel spies managed to steal secret plans to the Empire's ultimate weapon, the DEATH STAR, an armored space station with enough power to destroy an entire planet.\" #> [4] \"Pursued by the Empire's sinister agents, Princess Leia races home aboard her starship, custodian of the stolen plans that can save her people and restore freedom to the galaxy....\" anon_nlp_organizations(a_new_hope_intro) #> [1] \"It is a period of civil war.\"                                                                                                                                                         #> [2] \"Rebel spaceships, striking from a hidden base, have won their first victory against the evil Galactic Empire.\"                                                                        #> [3] \"During the battle, Rebel spies managed to steal secret plans to the Empire's ultimate weapon, [ORG], an armored space station with enough power to destroy an entire planet.\"         #> [4] \"Pursued by the Empire's sinister agents, Princess Leia races home aboard her [ORG]ship, custodian of the stolen plans that can save her people and restore freedom to the galaxy....\" anon_nlp_places(a_new_hope_intro) #> [1] \"It is a period of civil war.\"                                                                                                                                                         #> [2] \"Rebel spaceships, striking from a hidden base, have won their first victory against the evil [LOC].\"                                                                                  #> [3] \"During the battle, Rebel spies managed to steal secret plans to the [LOC]'s ultimate weapon, the DEATH STAR, an armored space station with enough power to destroy an entire planet.\" #> [4] \"Pursued by the [LOC]'s sinister agents, Princess Leia races home aboard her starship, custodian of the stolen plans that can save her people and restore freedom to the galaxy....\" anon_nlp_dates(a_new_hope_intro) #> [1] \"It is a period of civil war.\"                                                                                                                                                          #> [2] \"Rebel spaceships, striking from a hidden base, have won their first victory against the evil Galactic Empire.\"                                                                         #> [3] \"During the battle, Rebel spies managed to steal secret plans to the Empire's ultimate weapon, the DEATH STAR, an armored space station with enough power to destroy an entire planet.\" #> [4] \"Pursued by the Empire's sinister agents, Princess Leia races home aboard her starship, custodian of the stolen plans that can save her people and restore freedom to the galaxy....\" anon_nlp_numbers(a_new_hope_intro) #> [1] \"It is a period of civil war.\"                                                                                                                                                          #> [2] \"Rebel spaceships, striking from a hidden base, have won their [ORDINAL] victory against the evil Galactic Empire.\"                                                                     #> [3] \"During the battle, Rebel spies managed to steal secret plans to the Empire's ultimate weapon, the DEATH STAR, an armored space station with enough power to destroy an entire planet.\" #> [4] \"Pursued by the Empire's sinister agents, Princess Leia races home aboard her starship, custodian of the stolen plans that can save her people and restore freedom to the galaxy....\""},{"path":"/index.html","id":"data-environment-summary","dir":"","previous_headings":"","what":"Data Environment Summary","title":"Anonymize Sensitive Data in R Objects","text":"anon_data_summary() function provides anonymized overview data environment:","code":"anon_data_summary() #> Environment Data Summary #> ======================== #>  #>   total_objects data_frames other_objects total_memory #> 1             1           1             0        57440 #>  #> Data Frames: #> ------------ #>       name       type n_rows n_cols memory_size #> 1 starwars data.frame     87     14     56.1 Kb #>  #>  #> Variable Details (starwars): #>  #> --------------------------  #>      variable data_type n_distinct n_missing n_total pct_missing label #> 1        name character         87         0      87        0.00  <NA> #> 2      height   integer         45         6      87        6.90  <NA> #> 3        mass   numeric         38        28      87       32.18  <NA> #> 4  hair_color character         11         5      87        5.75  <NA> #> 5  skin_color character         31         0      87        0.00  <NA> #> 6   eye_color character         15         0      87        0.00  <NA> #> 7  birth_year   numeric         36        44      87       50.57  <NA> #> 8         sex character          4         4      87        4.60  <NA> #> 9      gender character          2         4      87        4.60  <NA> #> 10  homeworld character         48        10      87       11.49  <NA> #> 11    species character         37         4      87        4.60  <NA> #> 12      films      list         24         0      87        0.00  <NA> #> 13   vehicles      list         11         0      87        0.00  <NA> #> 14  starships      list         16         0      87        0.00  <NA>"},{"path":"/index.html","id":"pattern-detection-warnings","dir":"","previous_headings":"","what":"Pattern Detection Warnings","title":"Anonymize Sensitive Data in R Objects","text":"using pattern-based anonymization, anon detect potential matches report warnings unless check_approximate = FALSE.","code":"starwars |>    anon(list(     \"blonde\", \"bleu\", \"imperials\"   )) |>    glimpse() #> Warning: Potential approximate match: 'blond' is similar to pattern 'blonde' #> • Potential approximate match: 'blue' is similar to pattern 'bleu' #> • Potential approximate match: 'Imperial Speeder Bike' is similar to pattern 'imperials' #> • Potential approximate match: 'Imperial shuttle' is similar to pattern 'imperials' #> Rows: 87 #> Columns: 14 #> $ name       <chr> \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or… #> $ height     <int> 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2… #> $ mass       <dbl> 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.… #> $ hair_color <chr> \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N… #> $ skin_color <chr> \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"… #> $ eye_color  <chr> \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",… #> $ birth_year <dbl> 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, … #> $ sex        <chr> \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",… #> $ gender     <chr> \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini… #> $ homeworld  <chr> \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T… #> $ species    <chr> \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma… #> $ films      <list> <\"A New Hope\", \"The Empire Strikes Back\", \"Return of the J… #> $ vehicles   <list> <\"Snowspeeder\", \"Imperial Speeder Bike\">, <>, <>, <>, \"Imp… #> $ starships  <list> <\"X-wing\", \"Imperial shuttle\">, <>, <>, \"TIE Advanced x1\",…"},{"path":"/reference/anon.html","id":null,"dir":"Reference","previous_headings":"","what":"Anonymize sensitive information in R objects — anon","title":"Anonymize sensitive information in R objects — anon","text":"function anonymizes redacts sensitive information various R objects including character vectors, factors, data frames, lists. uses pattern matching find replace sensitive content, options targeted anonymization based variable names classes warnings approximate matches.","code":""},{"path":"/reference/anon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anonymize sensitive information in R objects — anon","text":"","code":"anon(   x,   pattern_list = list(),   default_replacement = getOption(\"anon.default_replacement\", default = \"[REDACTED]\"),   check_approximate = TRUE,   max_distance = 2,   df_variable_names = NULL,   df_classes = NULL,   check_names = TRUE,   check_labels = TRUE,   nlp_auto = getOption(\"anon.nlp_auto\"),   .self = FALSE )"},{"path":"/reference/anon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anonymize sensitive information in R objects — anon","text":"x object anonymize. Can character vector, factor, data frame, list. pattern_list list patterns search replace. Can include: Named elements names replacement values values one patterns match Unnamed elements one patterns replaced default_replacement parameter combined global option getOption(\"anon.pattern_list\"). default_replacement Value use default replacement value specific replacement provided. Default getOption(\"anon.default_replacement\", default = \"\\[REDACTED\\]\"). check_approximate Logical indicating whether check approximate matches using string distance. Default TRUE. max_distance Maximum string distance approximate matching check_approximate TRUE. Default 2. df_variable_names data frames, character vector named list specifying variable names anonymized: Unnamed elements: variables replaced default_replacement Named elements: variable names keys, value can either replacement value function parameter combined global option getOption(\"anon.df_variable_names\"). df_classes data frames, character vector named list specifying variable classes anonymized: Unnamed elements: variables matching classes replaced default_replacement Named elements: class names keys, value can either replacement value function parameter combined global option getOption(\"anon.df_classes\"). check_names Logical indicating whether anonymize object names (column names, row names, list names). Default TRUE. check_labels Logical indicating whether anonymize labels (attributes). Default TRUE. nlp_auto List logical values names corresponding entity names. Can generated nlp_auto() can set anon.nlp_auto global option. argument overrides global option. .self Logical internal use . Used recursive calls. Default FALSE. TRUE, warnings collected attributes instead issued immediately global options ignored explicitly provided parameters used.","code":""},{"path":"/reference/anon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Anonymize sensitive information in R objects — anon","text":"object class anon_context structure x sensitive information replaced. approximate matches found .self FALSE, warnings issued. .self TRUE, warnings attached attribute.","code":""},{"path":"/reference/anon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Anonymize sensitive information in R objects — anon","text":"anon() operates recursively nested structures. data frames: Individual columns processed based content Entire columns can replaced specified df_variable_names df_classes Column names, row names, labels anonymized enabled Pattern matching case-insensitive. check_approximate enabled, anon() warn remaining potential matches similar exact. Replacement functions can provided df_variable_names df_classes : R functions take column/variable input Formula notation (e.g., ~ .x + rnorm(length(.x), mean = 1)) returned object class anon_context allows combined anonymized objects using c().","code":""},{"path":"/reference/anon.html","id":"global-options","dir":"Reference","previous_headings":"","what":"Global Options","title":"Anonymize sensitive information in R objects — anon","text":"following global options affect function behavior: anon.default_replacement Default replacement text (default: \"[REDACTED]\"). anon.pattern_list Global patterns combine () pattern_list parameter. anon.df_variable_names Global variable name specifications combine () df_variable_names parameter. anon.df_classes Global class specifications combine () df_classes parameter. anon.nlp_auto List logical values indicating NLP entity types automatically anonymized. Use nlp_auto() generate list. Override option setting nlp_auto argument. set global options:","code":"options(anon.pattern_list = list(\"EMAIL\" = \"@\\\\S+\")) options(anon.df_variable_names = c(\"name\", \"email\")) options(anon.default_replacement = \"[HIDDEN]\") options(anon.nlp_auto = nlp_auto(person = TRUE))"},{"path":"/reference/anon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anonymize sensitive information in R objects — anon","text":"","code":"# Basic string anonymization text <- c(\"John Smith\", \"jane.doe@email.com\", \"Call 555-1234\") anon(text, pattern_list = c(\"John Smith\", \"@\\\\S+\", \"\\\\d{3}-\\\\d{4}\")) #> [1] \"[REDACTED]\"         \"jane.doe[REDACTED]\" \"Call [REDACTED]\"     # Using named patterns for specific replacements anon(text, pattern_list = list(\"PERSON\" = \"John Smith\",                                \"EMAIL\" = \"@\\\\S+\",                                \"PHONE\" = \"\\\\d{3}-\\\\d{4}\")) #> [1] \"PERSON\"        \"jane.doeEMAIL\" \"Call PHONE\"     # Data frame anonymization df <- data.frame(   name = c(\"Alice\", \"Bob\"),   email = c(\"alice@test.com\", \"bob@test.com\"),   score = c(95, 87) )  # Anonymize specific columns by name anon(df, df_variable_names = c(\"name\", \"email\")) #>         name      email score #> 1 [REDACTED] [REDACTED]    95 #> 2 [REDACTED] [REDACTED]    87  # Anonymize columns by class with custom replacements anon(df, df_classes = list(\"character\" = \"HIDDEN\")) #>     name  email score #> 1 HIDDEN HIDDEN    95 #> 2 HIDDEN HIDDEN    87  # Using functions for dynamic replacement anon(df, df_variable_names = list(\"name\" = ~ paste(\"Person\", seq_along(.x)))) #>       name          email score #> 1 Person 1 alice@test.com    95 #> 2 Person 2   bob@test.com    87  anon_df <- df |>   anon(     df_variable_names = list(       \"name\" = ~ paste(\"Person\", seq_along(.x)),       \"email\"     )   )  # Using global options options(anon.pattern_list = list(\"EMAIL\" = \"@\\\\S+\")) options(anon.df_variable_names = \"name\") anon(df)  # Will anonymize emails and names using global settings #>         name      email score #> 1 [REDACTED] aliceEMAIL    95 #> 2 [REDACTED]   bobEMAIL    87  # Combine anonymized objects anon_summary <- anon_data_summary(list(df = df)) combined <- c(anon_df, anon_summary) combined #> === ANONYMIZED DATA CONTEXT === #>  #>       name      email score #> 1 Person 1 [REDACTED]    95 #> 2 Person 2 [REDACTED]    87 #>  #> Environment Data Summary #> ======================== #>  #>   total_objects data_frames other_objects total_memory #> 1             1           1             0         1272 #>  #> Data Frames: #> ------------ #>         name       type n_rows n_cols memory_size #> 1 [REDACTED] data.frame      2      3      1.2 Kb #>  #>  #> Variable Details (df): #>  #> --------------------  #>   variable data_type n_distinct n_missing n_total pct_missing label #> 1     name character          2         0       2           0  <NA> #> 2    email character          2         0       2           0  <NA> #> 3    score   numeric          2         0       2           0  <NA> #>  #>  #>"},{"path":"/reference/anon_data_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate anonymized summary of data objects in an environment — anon_data_summary","title":"Generate anonymized summary of data objects in an environment — anon_data_summary","text":"function creates summary objects (primarily data frames) specified environment list, anonymizes results using pattern matching approach anon(). provides structural information data frames including dimensions, variable details, memory usage protecting sensitive information pattern-based redaction.","code":""},{"path":"/reference/anon_data_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate anonymized summary of data objects in an environment — anon_data_summary","text":"","code":"anon_data_summary(   envir = globalenv(),   pattern_list = list(),   default_replacement = getOption(\"anon.default_replacement\", default = \"[REDACTED]\"),   check_approximate = TRUE,   max_distance = 2 )"},{"path":"/reference/anon_data_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate anonymized summary of data objects in an environment — anon_data_summary","text":"envir environment list containing objects summarize. passed list, unnamed elements automatically given names (either derived function call indexed \"x1\", \"x2\", etc.). Default globalenv(). pattern_list list patterns search replace. Can include: Named elements names replacement values values one patterns match Unnamed elements one patterns replaced default_replacement parameter combined global option getOption(\"anon.pattern_list\"). default_replacement Value use default replacement value specific replacement provided. Default getOption(\"anon.default_replacement\", default = \"\\[REDACTED\\]\"). check_approximate Logical indicating whether check approximate matches using string distance. Default TRUE. max_distance Maximum string distance approximate matching check_approximate TRUE. Default 2.","code":""},{"path":"/reference/anon_data_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate anonymized summary of data objects in an environment — anon_data_summary","text":"object class \"anon_data_summary\" containing: $summary: tibble overall statistics (total objects, data frames count, objects count, total memory usage) $data_frames: list two elements (present data frames exist): $structure: tibble structural information data frame (name, label, dimensions, memory size) $variables: tibble detailed variable information including data types, missing values, distinct values, labels content anonymized according specified patterns","code":""},{"path":"/reference/anon_data_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate anonymized summary of data objects in an environment — anon_data_summary","text":"function operates key steps: Generates detailed summaries objects Creates structured output summary statistics detailed information data frames Applies anonymization using anon() provided patterns data frames, function captures: Structural information: dimensions, memory usage, data frame-level labels Variable details: data types, missing value counts, distinct value counts, variable labels output includes custom print method displays information readable format maintaining anonymization.","code":""},{"path":[]},{"path":"/reference/anon_data_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate anonymized summary of data objects in an environment — anon_data_summary","text":"","code":"# Create study data with sensitive study codes in variable names study_results <- data.frame(   participant_id = c(\"P001\", \"P002\", \"P003\"),   ABC123_RESULT = c(85.2, 92.1, 78.5),   ABC123_BASELINE = c(80.0, 88.3, 75.2),   CBA321_RESULT = c(45.1, 52.3, 41.8),   CBA321_BASELINE = c(42.0, 49.1, 39.5),   age = c(45, 32, 67) )  # Study metadata containing the same sensitive study codes as values study_metadata <- list(   primary_study = \"ABC123\",   secondary_study = \"CBA321\",   principal_investigator = \"Dr. Smith\",   site_location = \"Boston Medical Center\" )  # Create environment summary with anonymization env_list <- list(study_results = study_results, metadata = study_metadata)  # Use metadata values to inform anonymization patterns # This will anonymize both the variable names (ABC123_RESULT, CBA321_RESULT, etc.) # and the corresponding values in the metadata env_list |>   anon_data_summary(     pattern_list = list(       \"STUDY_A\" = study_metadata$primary_study,    # \"ABC123\"       \"STUDY_B\" = study_metadata$secondary_study,  # \"CBA321\"       \"MEDICAL_CENTER\" = \"Boston Medical Center\"     )   ) #> Environment Data Summary #> ======================== #>  #>   total_objects data_frames other_objects total_memory #> 1             2           1             1         2752 #>  #> Data Frames: #> ------------ #>         name       type n_rows n_cols memory_size #> 1 [REDACTED] data.frame      3      6      1.7 Kb #>  #>  #> Variable Details (study_results): #>  #> -------------------------------  #>           variable data_type n_distinct n_missing n_total pct_missing label #> 1   participant_id character          3         0       3           0  <NA> #> 2   STUDY_A_RESULT   numeric          3         0       3           0  <NA> #> 3 STUDY_A_BASELINE   numeric          3         0       3           0  <NA> #> 4   STUDY_B_RESULT   numeric          3         0       3           0  <NA> #> 5 STUDY_B_BASELINE   numeric          3         0       3           0  <NA> #> 6              age   numeric          3         0       3           0  <NA> #>  #>  #> Other Objects: #> -------------- #>         name type length element_types memory_size #> 1 [REDACTED] list      4     character        1 Kb"},{"path":"/reference/anon_date_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift dates to a new time period — anon_date_shift","title":"Shift dates to a new time period — anon_date_shift","text":"Shifts dates new time period preserving relative relationships dates. Supports Date POSIXct objects.","code":""},{"path":"/reference/anon_date_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift dates to a new time period — anon_date_shift","text":"","code":"anon_date_shift(x, center_date = Sys.Date(), scramble = FALSE)"},{"path":"/reference/anon_date_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift dates to a new time period — anon_date_shift","text":"x Date POSIXct vector anonymize center_date New center point date range (default: current date) scramble Logical, whether randomize assignment order generated results","code":""},{"path":"/reference/anon_date_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift dates to a new time period — anon_date_shift","text":"","code":"dates <- as.Date(c(\"2023-01-15\", \"2023-02-20\", \"2023-03-10\")) anon_date_shift(dates, center_date = \"2024-06-01\") #> [1] \"2024-05-02\" \"2024-06-07\" \"2024-06-25\""},{"path":"/reference/anon_email.html","id":null,"dir":"Reference","previous_headings":"","what":"Anonymize email addresses — anon_email","title":"Anonymize email addresses — anon_email","text":"Anonymizes email addresses replacing sequential fake emails.","code":""},{"path":"/reference/anon_email.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anonymize email addresses — anon_email","text":"","code":"anon_email(x, start = \"user\", domain = \"domain.com\")"},{"path":"/reference/anon_email.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anonymize email addresses — anon_email","text":"x character vector anonymize start Character prefix generated results (default: \"user\") domain Domain generated emails (default: \"domain.com\")","code":""},{"path":"/reference/anon_email.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anonymize email addresses — anon_email","text":"","code":"emails <- c(\"john@company.com\", \"not_an_email\", \"jane at work dot org\") anon_email(emails) #> [1] \"user001@domain.com\" \"not_an_email\"       \"user002@domain.com\""},{"path":"/reference/anon_id_chr_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert unique identifiers to sequential character IDs — anon_id_chr_sequence","title":"Convert unique identifiers to sequential character IDs — anon_id_chr_sequence","text":"Convert unique identifiers sequential character IDs","code":""},{"path":"/reference/anon_id_chr_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert unique identifiers to sequential character IDs — anon_id_chr_sequence","text":"","code":"anon_id_chr_sequence(   x,   scramble = FALSE,   start = \"ID \",   padding = TRUE,   padding_chr = \"0\" )"},{"path":"/reference/anon_id_chr_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert unique identifiers to sequential character IDs — anon_id_chr_sequence","text":"x vector anonymize scramble Logical, whether randomize assignment order generated results start Character prefix generated results (default: \"ID \") padding Logical, whether zero-pad numbers consistent width padding_chr Character used padding (default: \"0\")","code":""},{"path":"/reference/anon_id_chr_sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert unique identifiers to sequential character IDs — anon_id_chr_sequence","text":"","code":"ids <- c(\"A123\", \"B456\", \"A123\", \"C789\") anon_id_chr_sequence(ids) #> [1] \"ID 1\" \"ID 2\" \"ID 1\" \"ID 3\""},{"path":"/reference/anon_id_num_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert unique identifiers to sequential numeric IDs — anon_id_num_sequence","title":"Convert unique identifiers to sequential numeric IDs — anon_id_num_sequence","text":"Convert unique identifiers sequential numeric IDs","code":""},{"path":"/reference/anon_id_num_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert unique identifiers to sequential numeric IDs — anon_id_num_sequence","text":"","code":"anon_id_num_sequence(x, scramble = FALSE)"},{"path":"/reference/anon_id_num_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert unique identifiers to sequential numeric IDs — anon_id_num_sequence","text":"x vector anonymize scramble Logical, whether randomize assignment order generated results","code":""},{"path":"/reference/anon_nlp_entities.html","id":null,"dir":"Reference","previous_headings":"","what":"Anonymize Named Entities in Text Using NLP — anon_nlp_entities","title":"Anonymize Named Entities in Text Using NLP — anon_nlp_entities","text":"functions use natural language processing identify anonymize different types named entities text. function combines NLP entity extraction pattern expansion anonymization.","code":""},{"path":"/reference/anon_nlp_entities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anonymize Named Entities in Text Using NLP — anon_nlp_entities","text":"","code":"anon_nlp_entities(x, entity_types = nlp_entity_sets$all, ...)  anon_nlp_proper_nouns(x, ...)  anon_nlp_dates(x, ...)  anon_nlp_dates_and_times(x, ...)  anon_nlp_named(x, ...)  anon_nlp_numbers(x, ...)  anon_nlp_organizations(x, ...)  anon_nlp_people(x, ...)  anon_nlp_places(x, ...)"},{"path":"/reference/anon_nlp_entities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anonymize Named Entities in Text Using NLP — anon_nlp_entities","text":"x object anonymize. Can character vector, factor, data frame, list. entity_types Character vector entity types extract. Entity types : \"PERSON\", \"NORP\", \"FAC\", \"ORG\", \"GPE\", \"LOC\", \"PRODUCT\", \"EVENT\", \"WORK_OF_ART\", \"LAW\", \"LANGUAGE\", \"DATE\", \"TIME\", \"PERCENT\", \"MONEY\", \"QUANTITY\", \"ORDINAL\", \"CARDINAL\". See nlp_entity_sets collections entity types. ... Additional arguments passed anon","code":""},{"path":"/reference/anon_nlp_entities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Anonymize Named Entities in Text Using NLP — anon_nlp_entities","text":"anonymized object class anon_context named entities replaced according anonymization workflow.","code":""},{"path":"/reference/anon_nlp_entities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Anonymize Named Entities in Text Using NLP — anon_nlp_entities","text":"functions: Use NLP extract potentially sensitive information specified type Extend patterns using more_patterns comprehensive matching Apply anon anonymize identified patterns Available entity types: anon_nlp_entities(): Anonymize specified entity types anon_nlp_proper_nouns(): Anonymize proper nouns using POS tagging anon_nlp_dates(): Anonymize dates anon_nlp_dates_and_times(): Anonymize dates times anon_nlp_people(): Anonymize person names anon_nlp_organizations(): Anonymize organization names anon_nlp_places(): Anonymize place names locations anon_nlp_numbers(): Anonymize numeric entities anon_nlp_named(): Anonymize named entities","code":""},{"path":"/reference/anon_nlp_entities.html","id":"global-options","dir":"Reference","previous_headings":"","what":"Global Options","title":"Anonymize Named Entities in Text Using NLP — anon_nlp_entities","text":"anon.nlp_default_replacements global option affects default replacement values used functions default_replacement argument explicitly provided. See nlp_default_replacements() generate content option.","code":""},{"path":"/reference/anon_nlp_entities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anonymize Named Entities in Text Using NLP — anon_nlp_entities","text":"","code":"text <- c(\"John Smith works at Microsoft in Seattle.\",           \"The deal was worth $1.2 million in 2023.\",           \"He was the first employee to make 100% of his 3rd quarter targets.\")  # Anonymize all entities anon_nlp_entities(text) #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> [1] \"John Smith works at Microsoft in Seattle.\"                          #> [2] \"The deal was worth $1.2 million in 2023.\"                           #> [3] \"He was the first employee to make 100% of his 3rd quarter targets.\"  # Anonymize person names anon_nlp_people(text) #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> [1] \"John Smith works at Microsoft in Seattle.\"                          #> [2] \"The deal was worth $1.2 million in 2023.\"                           #> [3] \"He was the first employee to make 100% of his 3rd quarter targets.\"  # Anonymize organizations with custom replacement anon_nlp_organizations(text, default_replacement = \"[COMPANY]\") #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> [1] \"John Smith works at Microsoft in Seattle.\"                          #> [2] \"The deal was worth $1.2 million in 2023.\"                           #> [3] \"He was the first employee to make 100% of his 3rd quarter targets.\"  # Anonymize specific entity types anon_nlp_entities(text, entity_types = c(\"PERSON\", \"ORG\")) #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> [1] \"John Smith works at Microsoft in Seattle.\"                          #> [2] \"The deal was worth $1.2 million in 2023.\"                           #> [3] \"He was the first employee to make 100% of his 3rd quarter targets.\""},{"path":"/reference/anon_num_preserve_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Anonymize numeric data while preserving distribution — anon_num_preserve_distribution","title":"Anonymize numeric data while preserving distribution — anon_num_preserve_distribution","text":"Anonymizes numeric data preserving distributional properties using various transformation methods.","code":""},{"path":"/reference/anon_num_preserve_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anonymize numeric data while preserving distribution — anon_num_preserve_distribution","text":"","code":"anon_num_preserve_distribution(   x,   method = c(\"rank\", \"noise\", \"quantile\"),   noise_sd = NULL,   quantile_dist_family = c(\"normal\", \"uniform\", \"exponential\") )"},{"path":"/reference/anon_num_preserve_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anonymize numeric data while preserving distribution — anon_num_preserve_distribution","text":"x numeric vector anonymize method Transformation method: \"rank\", \"noise\", \"quantile\" noise_sd Standard deviation noise method (used method = \"noise\") (default: NULL resulting standard deviation calculated) quantile_dist_family Distribution family quantile method: \"normal\", \"uniform\", \"exponential\" (used method = \"quantile\")","code":""},{"path":"/reference/anon_num_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numeric values into range categories — anon_num_range","title":"Convert numeric values into range categories — anon_num_range","text":"Converts numeric values range categories, either preserving actual ranges creating anonymized range labels.","code":""},{"path":"/reference/anon_num_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numeric values into range categories — anon_num_range","text":"","code":"anon_num_range(   x,   n_breaks = 5,   method = c(\"equal_width\", \"equal_count\"),   clean_breaks = TRUE,   scramble = FALSE,   keep_values = TRUE )"},{"path":"/reference/anon_num_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numeric values into range categories — anon_num_range","text":"x vector anonymize n_breaks Number range categories create (default: 5) method Method creating breaks: \"equal_width\" \"equal_count\" clean_breaks Logical, whether use pretty break points scramble Logical, whether randomize assignment order generated results keep_values Logical, whether keep actual range values use generic labels","code":""},{"path":"/reference/anon_num_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert numeric values into range categories — anon_num_range","text":"","code":"values <- c(150, 165, 180, 175, 160, 190) anon_num_range(values, n_breaks = 3) #> [1] \"[150,160)\" \"[160,170)\" \"[180,190]\" \"[170,180)\" \"[160,170)\" \"[180,190]\""},{"path":"/reference/anon_phone_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Anonymize phone numbers — anon_phone_number","title":"Anonymize phone numbers — anon_phone_number","text":"Anonymizes phone numbers sequential fake numbers.","code":""},{"path":"/reference/anon_phone_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anonymize phone numbers — anon_phone_number","text":"","code":"anon_phone_number(x)"},{"path":"/reference/anon_phone_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anonymize phone numbers — anon_phone_number","text":"x vector anonymize","code":""},{"path":"/reference/c.anon_context.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine anon_context objects — c.anon_context","title":"Combine anon_context objects — c.anon_context","text":"method allows combining multiple anonymized objects created anon() anon_data_summary() using c(). result maintains anonymized content provides print method suitable LLM context. additional header included printed output named elements.","code":""},{"path":"/reference/c.anon_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine anon_context objects — c.anon_context","text":"","code":"# S3 method for class 'anon_context' c(...)"},{"path":"/reference/c.anon_context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine anon_context objects — c.anon_context","text":"... anon_context objects combine","code":""},{"path":"/reference/c.anon_context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine anon_context objects — c.anon_context","text":"anon_context_collection object containing input objects","code":""},{"path":"/reference/c.anon_context.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine anon_context objects — c.anon_context","text":"","code":"df <- data.frame(name = c(\"John\", \"Jane\"), age = c(25, 30)) anon_df <- anon(df, pattern_list = c(\"John\", \"Jane\")) #> Warning: Potential approximate match: 'name' is similar to pattern 'Jane' summary_obj <- anon_data_summary(list(df = df)) combined <- c(anon_df, summary_obj) print(combined) #> === ANONYMIZED DATA CONTEXT === #>  #>         name age #> 1 [REDACTED]  25 #> 2 [REDACTED]  30 #>  #> Environment Data Summary #> ======================== #>  #>   total_objects data_frames other_objects total_memory #> 1             1           1             0          992 #>  #> Data Frames: #> ------------ #>         name       type n_rows n_cols memory_size #> 1 [REDACTED] data.frame      2      2   992 bytes #>  #>  #> Variable Details (df): #>  #> --------------------  #>   variable data_type n_distinct n_missing n_total pct_missing label #> 1     name character          2         0       2           0  <NA> #> 2      age   numeric          2         0       2           0  <NA> #>  #>  #>"},{"path":"/reference/more_patterns.html","id":null,"dir":"Reference","previous_headings":"","what":"Create expanded pattern vector for text matching — more_patterns","title":"Create expanded pattern vector for text matching — more_patterns","text":"Accepts character vector patterns returns expanded vector containing: Original items Original items special characters escaped Patterns spaces replaced pattern number spaces one character words. Individual words item, split spaces punctuation, including stop words.","code":""},{"path":"/reference/more_patterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create expanded pattern vector for text matching — more_patterns","text":"","code":"more_patterns(   patterns,   original = TRUE,   escape_regex = TRUE,   spaces_to_flexible = TRUE,   individual = TRUE )"},{"path":"/reference/more_patterns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create expanded pattern vector for text matching — more_patterns","text":"patterns Character vector patterns expand original Logical. Whether include original patterns (default: TRUE) escape_regex Logical. Whether include original patterns special characters escaped (default: TRUE) spaces_to_flexible Logical. Whether include space-flexible patterns (default: TRUE) individual Logical. Whether include individual words (default: TRUE)","code":""},{"path":"/reference/more_patterns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create expanded pattern vector for text matching — more_patterns","text":"Character vector selected pattern expansions","code":""},{"path":"/reference/more_patterns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create expanded pattern vector for text matching — more_patterns","text":"intention order replace phrases replacements possible taking additional efforts anonymize sensitive information.","code":""},{"path":"/reference/more_patterns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create expanded pattern vector for text matching — more_patterns","text":"","code":"people <- c(\"John Smith\", \"Mary Jane Watson\") more_patterns(people) #> [1] \"John Smith\"                       \"Mary Jane Watson\"                 #> [3] \"John\\\\s*.\\\\s*Smith\"               \"Mary\\\\s*.\\\\s*Jane\\\\s*.\\\\s*Watson\" #> [5] \"John\"                             \"Smith\"                            #> [7] \"Mary\"                             \"Jane\"                             #> [9] \"Watson\"                           more_patterns(people, individual = FALSE) #> [1] \"John Smith\"                       \"Mary Jane Watson\"                 #> [3] \"John\\\\s*.\\\\s*Smith\"               \"Mary\\\\s*.\\\\s*Jane\\\\s*.\\\\s*Watson\""},{"path":"/reference/new_anon_context.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for anon_context objects — new_anon_context","title":"Constructor for anon_context objects — new_anon_context","text":"Constructor anon_context objects","code":""},{"path":"/reference/new_anon_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for anon_context objects — new_anon_context","text":"","code":"new_anon_context(x, ...)"},{"path":"/reference/new_anon_context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for anon_context objects — new_anon_context","text":"x object wrap anon_context class ... Additional attributes set","code":""},{"path":"/reference/new_anon_context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for anon_context objects — new_anon_context","text":"Object anon_context class","code":""},{"path":"/reference/nlp_auto.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate NLP auto-anonymization options list — nlp_auto","title":"Generate NLP auto-anonymization options list — nlp_auto","text":"function creates named list logical values indicating types NLP entities automatically anonymized using core anon() function. provides centralized way manage automatic NLP anonymization settings set global option anon.nlp_auto.","code":""},{"path":"/reference/nlp_auto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate NLP auto-anonymization options list — nlp_auto","text":"","code":"nlp_auto(   default = FALSE,   cardinal = default,   date = default,   event = default,   fac = default,   gpe = default,   language = default,   law = default,   loc = default,   money = default,   norp = default,   ordinal = default,   org = default,   percent = default,   person = default,   product = default,   quantity = default,   time = default,   work_of_art = default,   propn = default )"},{"path":"/reference/nlp_auto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate NLP auto-anonymization options list — nlp_auto","text":"default Logical indicating value use unset arguments. Default FALSE cardinal Logical indicating whether automatically anonymize cardinal numbers date Logical indicating whether automatically anonymize dates event Logical indicating whether automatically anonymize events fac Logical indicating whether automatically anonymize facilities gpe Logical indicating whether automatically anonymize geopolitical entities language Logical indicating whether automatically anonymize languages law Logical indicating whether automatically anonymize laws loc Logical indicating whether automatically anonymize locations money Logical indicating whether automatically anonymize money norp Logical indicating whether automatically anonymize nationalities/religious/political groups ordinal Logical indicating whether automatically anonymize ordinal numbers org Logical indicating whether automatically anonymize organizations percent Logical indicating whether automatically anonymize percentages person Logical indicating whether automatically anonymize person names product Logical indicating whether automatically anonymize products quantity Logical indicating whether automatically anonymize quantities time Logical indicating whether automatically anonymize times work_of_art Logical indicating whether automatically anonymize works art propn Logical indicating whether automatically anonymize proper nouns","code":""},{"path":"/reference/nlp_auto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate NLP auto-anonymization options list — nlp_auto","text":"named list logical values can set options().","code":""},{"path":"/reference/nlp_auto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate NLP auto-anonymization options list — nlp_auto","text":"","code":"# Get default auto-anonymization options (all TRUE) default_auto <- nlp_auto(default = TRUE)  # Customize specific entity types (default, default is FALSE) custom_auto <- nlp_auto(   person = TRUE,   org = TRUE )  # Set as global option previous_options <- options(anon.nlp_auto = custom_auto)  # Get current global option options(\"anon.nlp_auto\") #> $anon.nlp_auto #> $anon.nlp_auto$cardinal #> [1] FALSE #>  #> $anon.nlp_auto$date #> [1] FALSE #>  #> $anon.nlp_auto$event #> [1] FALSE #>  #> $anon.nlp_auto$fac #> [1] FALSE #>  #> $anon.nlp_auto$gpe #> [1] FALSE #>  #> $anon.nlp_auto$language #> [1] FALSE #>  #> $anon.nlp_auto$law #> [1] FALSE #>  #> $anon.nlp_auto$loc #> [1] FALSE #>  #> $anon.nlp_auto$money #> [1] FALSE #>  #> $anon.nlp_auto$norp #> [1] FALSE #>  #> $anon.nlp_auto$ordinal #> [1] FALSE #>  #> $anon.nlp_auto$org #> [1] TRUE #>  #> $anon.nlp_auto$percent #> [1] FALSE #>  #> $anon.nlp_auto$person #> [1] TRUE #>  #> $anon.nlp_auto$product #> [1] FALSE #>  #> $anon.nlp_auto$quantity #> [1] FALSE #>  #> $anon.nlp_auto$time #> [1] FALSE #>  #> $anon.nlp_auto$work_of_art #> [1] FALSE #>  #> $anon.nlp_auto$propn #> [1] FALSE #>  #>   # Reset the previous global options options(anon.nlp_auto = previous_options$anon.nlp_auto)"},{"path":"/reference/nlp_default_replacements.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate default replacement options list for NLP entities — nlp_default_replacements","title":"Generate default replacement options list for NLP entities — nlp_default_replacements","text":"function creates named list default replacement values different types NLP entity-based anonymization. provides centralized way manage default replacements entities anonymized anon_nlp_entities() anon_nlp_proper_nouns() set global option anon.nlp_default_replacements.","code":""},{"path":"/reference/nlp_default_replacements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate default replacement options list for NLP entities — nlp_default_replacements","text":"","code":"nlp_default_replacements(   cardinal = \"[CARDINAL]\",   date = \"[DATE]\",   event = \"[EVENT]\",   fac = \"[FAC]\",   gpe = \"[GPE]\",   language = \"[LANGUAGE]\",   law = \"[LAW]\",   loc = \"[LOC]\",   money = \"[MONEY]\",   norp = \"[NORP]\",   ordinal = \"[ORDINAL]\",   org = \"[ORG]\",   percent = \"[PERCENT]\",   person = \"[PERSON]\",   product = \"[PRODUCT]\",   quantity = \"[QUANTITY]\",   time = \"[TIME]\",   work_of_art = \"[WORK_OF_ART]\",   propn = \"[PROPN]\" )"},{"path":"/reference/nlp_default_replacements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate default replacement options list for NLP entities — nlp_default_replacements","text":"cardinal Default replacement cardinal numbers (default: \"[CARDINAL]\") date Default replacement dates (default: \"[DATE]\") event Default replacement events (default: \"[EVENT]\") fac Default replacement facilities (default: \"[FAC]\") gpe Default replacement geopolitical entities (default: \"[GPE]\") language Default replacement languages (default: \"[LANGUAGE]\") law Default replacement laws (default: \"[LAW]\") loc Default replacement locations (default: \"[LOC]\") money Default replacement money (default: \"[MONEY]\") norp Default replacement nationalities/religious/political groups (default: \"[NORP]\") ordinal Default replacement ordinal numbers (default: \"[ORDINAL]\") org Default replacement organizations (default: \"[ORG]\") percent Default replacement percentages (default: \"[PERCENT]\") person Default replacement person names (default: \"[PERSON]\") product Default replacement products (default: \"[PRODUCT]\") quantity Default replacement quantities (default: \"[QUANTITY]\") time Default replacement times (default: \"[TIME]\") work_of_art Default replacement works art (default: \"[WORK_OF_ART]\") propn Default replacement proper nouns (default: \"[PROPN]\"). applies anon_nlp_proper_nouns().","code":""},{"path":"/reference/nlp_default_replacements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate default replacement options list for NLP entities — nlp_default_replacements","text":"named list default replacement values can set options().","code":""},{"path":"/reference/nlp_default_replacements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate default replacement options list for NLP entities — nlp_default_replacements","text":"","code":"# Get default options default_opts <- nlp_default_replacements()  # Customize specific replacements custom_opts <- nlp_default_replacements(   person = \"[NAME]\",   org = \"[COMPANY]\" )  # Set as global option previous_options <- options(anon.nlp_default_replacements = custom_opts)  # Get current global option options(\"anon.nlp_default_replacements\") #> $anon.nlp_default_replacements #> $anon.nlp_default_replacements$cardinal #> [1] \"[CARDINAL]\" #>  #> $anon.nlp_default_replacements$date #> [1] \"[DATE]\" #>  #> $anon.nlp_default_replacements$event #> [1] \"[EVENT]\" #>  #> $anon.nlp_default_replacements$fac #> [1] \"[FAC]\" #>  #> $anon.nlp_default_replacements$gpe #> [1] \"[GPE]\" #>  #> $anon.nlp_default_replacements$language #> [1] \"[LANGUAGE]\" #>  #> $anon.nlp_default_replacements$law #> [1] \"[LAW]\" #>  #> $anon.nlp_default_replacements$loc #> [1] \"[LOC]\" #>  #> $anon.nlp_default_replacements$money #> [1] \"[MONEY]\" #>  #> $anon.nlp_default_replacements$norp #> [1] \"[NORP]\" #>  #> $anon.nlp_default_replacements$ordinal #> [1] \"[ORDINAL]\" #>  #> $anon.nlp_default_replacements$org #> [1] \"[COMPANY]\" #>  #> $anon.nlp_default_replacements$percent #> [1] \"[PERCENT]\" #>  #> $anon.nlp_default_replacements$person #> [1] \"[NAME]\" #>  #> $anon.nlp_default_replacements$product #> [1] \"[PRODUCT]\" #>  #> $anon.nlp_default_replacements$quantity #> [1] \"[QUANTITY]\" #>  #> $anon.nlp_default_replacements$time #> [1] \"[TIME]\" #>  #> $anon.nlp_default_replacements$work_of_art #> [1] \"[WORK_OF_ART]\" #>  #> $anon.nlp_default_replacements$propn #> [1] \"[PROPN]\" #>  #>   # Reset the previous global options options(anon.nlp_default_replacements = previous_options$anon.nlp_default_replacements)"},{"path":"/reference/nlp_entity_sets.html","id":null,"dir":"Reference","previous_headings":"","what":"Named Entity Type Collections — nlp_entity_sets","title":"Named Entity Type Collections — nlp_entity_sets","text":"list predefined collections named entity types use spaCy's named entity recognition. collections group entity types semantic categories, making easier extract related types entities.","code":""},{"path":"/reference/nlp_entity_sets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Named Entity Type Collections — nlp_entity_sets","text":"","code":"nlp_entity_sets"},{"path":"/reference/nlp_entity_sets.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Named Entity Type Collections — nlp_entity_sets","text":"named list following elements: available entity types: \"CARDINAL\", \"DATE\", \"EVENT\", \"FAC\", \"GPE\", \"LANGUAGE\", \"LAW\", \"LOC\", \"MONEY\", \"NORP\", \"ORDINAL\", \"ORG\", \"PERCENT\", \"PERSON\", \"PRODUCT\", \"QUANTITY\", \"TIME\", \"WORK_OF_ART\", \"PROPN\" cultural_artifacts Language, laws, products, works art: \"LANGUAGE\", \"LAW\", \"PRODUCT\", \"WORK_OF_ART\" date_and_time \"DATE\", \"TIME\" named Named entities: \"EVENT\", \"FAC\", \"GPE\", \"LOC\", \"NORP\", \"ORG\", \"PERSON\", \"PRODUCT\", \"PROPN\" numbers Numeric quantitative entities: \"CARDINAL\", \"MONEY\", \"ORDINAL\", \"PERCENT\", \"QUANTITY\" organizations Organizational entities: \"NORP\", \"ORG\" places Location place entities: \"FAC\", \"GPE\", \"LOC\"","code":""},{"path":"/reference/nlp_entity_sets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Named Entity Type Collections — nlp_entity_sets","text":"entity types follow OntoNotes 5.0 annotation scheme: CARDINAL: Numerals fall another type DATE: Absolute relative dates periods EVENT: Named hurricanes, battles, wars, sports events, etc. FAC: Buildings, airports, highways, bridges, etc. GPE: Countries, cities, states (geopolitical entities) LANGUAGE: named language LAW: Named documents made laws LOC: Non-GPE locations, mountain ranges, bodies water MONEY: Monetary values, including unit NORP: Nationalities religious political groups ORDINAL: \"first\", \"second\", etc. ORG: Companies, agencies, institutions, etc. PERCENT: Percentage, including \"%\" PERSON: People, including fictional PRODUCT: Objects, vehicles, foods, etc. (services) QUANTITY: Measurements, weight distance TIME: Times smaller day WORK_OF_ART: Titles books, songs, etc. PROPN: Proper nouns","code":""},{"path":"/reference/nlp_entity_sets.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Named Entity Type Collections — nlp_entity_sets","text":"OntoNotes 5.0 Annotation Scheme: https://catalog.ldc.upenn.edu/docs/LDC2013T19/OntoNotes-Release-5.0.pdf spaCy Named Entity Recognition: https://spacy.io/usage/linguistic-features#named-entities","code":""},{"path":"/reference/nlp_entity_sets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Named Entity Type Collections — nlp_entity_sets","text":"","code":"# View all available entity sets names(nlp_entity_sets) #> [1] \"all\"                \"cultural_artifacts\" \"date_and_time\"      #> [4] \"named\"              \"numbers\"            \"organizations\"      #> [7] \"places\"              # View the contents of specific sets nlp_entity_sets$places #> [1] \"FAC\" \"GPE\" \"LOC\" nlp_entity_sets$numbers #> [1] \"CARDINAL\" \"MONEY\"    \"ORDINAL\"  \"PERCENT\"  \"QUANTITY\"  # Use in entity extraction text <- \"Apple Inc. was founded in Cupertino on April 1, 1976.\" nlp_get_entities(text, nlp_entity_sets$organizations) #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> character(0) nlp_get_entities(text, nlp_entity_sets$places) #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> character(0) nlp_get_entities(text, nlp_entity_sets$date_and_time) #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> character(0)"},{"path":"/reference/nlp_get_entities.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Named Entities from Text — nlp_get_entities","title":"Extract Named Entities from Text — nlp_get_entities","text":"Extracts named entities using spaCy's named entity recognition. Entity types follow OntoNotes 5.0 annotation scheme implemented spaCy models.","code":""},{"path":"/reference/nlp_get_entities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Named Entities from Text — nlp_get_entities","text":"","code":"nlp_get_dates(x)  nlp_get_dates_and_times(x)  nlp_get_named(x)  nlp_get_numbers(x)  nlp_get_organizations(x)  nlp_get_people(x)  nlp_get_places(x)  nlp_get_entities(x, entity_types = nlp_entity_sets$all, return_list = FALSE)  nlp_get_proper_nouns(x)"},{"path":"/reference/nlp_get_entities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Named Entities from Text — nlp_get_entities","text":"x character vector entity_types Character vector entity types extract. Entity types : \"PERSON\", \"NORP\", \"FAC\", \"ORG\", \"GPE\", \"LOC\", \"PRODUCT\", \"EVENT\", \"WORK_OF_ART\", \"LAW\", \"LANGUAGE\", \"DATE\", \"TIME\", \"PERCENT\", \"MONEY\", \"QUANTITY\", \"ORDINAL\", \"CARDINAL\". See nlp_entity_sets collections entity types. return_list Logical indicating whether return named list entities grouped type (TRUE) flat character vector (FALSE). Default FALSE.","code":""},{"path":"/reference/nlp_get_entities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Named Entities from Text — nlp_get_entities","text":"return_list = FALSE (default): character vector unique extracted entities specified type(s). return_list = TRUE: named list names entity types values character vectors unique entities type.","code":""},{"path":"/reference/nlp_get_entities.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract Named Entities from Text — nlp_get_entities","text":"spaCy Named Entity Recognition spaCy Model Documentation OntoNotes 5.0 Annotation Scheme","code":""},{"path":[]},{"path":"/reference/nlp_get_entities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Named Entities from Text — nlp_get_entities","text":"","code":"text <- c(\"John Smith works at Microsoft in Seattle.\",           \"The deal was worth $1.2 million in 2023.\",           \"He was the first employee to make 100% of his 3rd quarter targets.\")  nlp_get_entities(text) #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> character(0) nlp_get_people(text) #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> character(0) nlp_get_organizations(text) #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> character(0) nlp_get_places(text) #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> character(0) nlp_get_numbers(text) #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> character(0) nlp_get_entities(text, \"MONEY\") #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> character(0) nlp_get_dates(text) #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> character(0) nlp_get_proper_nouns(text) #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> character(0)  # Get entities grouped by type nlp_get_entities(text, c(\"PERSON\", \"ORG\", \"MONEY\"), return_list = TRUE) #> Warning: cleanNLP initialization or processing failed: Python module 'cleannlp' not found. Install with: #>   pip install cleannlp #> $PERSON #> NULL #>  #> $ORG #> NULL #>  #> $MONEY #> NULL #>"},{"path":"/reference/print.anon_context.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for single anon_context objects — print.anon_context","title":"Print method for single anon_context objects — print.anon_context","text":"Print method single anon_context objects","code":""},{"path":"/reference/print.anon_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for single anon_context objects — print.anon_context","text":"","code":"# S3 method for class 'anon_context' print(x, ...)"},{"path":"/reference/print.anon_context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for single anon_context objects — print.anon_context","text":"x anon_context object ... Additional arguments passed NextMethod","code":""},{"path":"/reference/print.anon_context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for single anon_context objects — print.anon_context","text":"Invisibly returns x","code":""},{"path":"/reference/print.anon_context_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for anon_context_collection — print.anon_context_collection","title":"Print method for anon_context_collection — print.anon_context_collection","text":"Displays combined anonymized objects format suitable LLM prompts. object clearly delineated presented appropriate context.","code":""},{"path":"/reference/print.anon_context_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for anon_context_collection — print.anon_context_collection","text":"","code":"# S3 method for class 'anon_context_collection' print(x, ...)"},{"path":"/reference/print.anon_context_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for anon_context_collection — print.anon_context_collection","text":"x anon_context_collection object ... Additional arguments (currently unused)","code":""},{"path":"/reference/print.anon_context_collection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for anon_context_collection — print.anon_context_collection","text":"Invisibly returns x","code":""},{"path":"/reference/print.anon_data_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for anonymized environment summary — print.anon_data_summary","title":"Print method for anonymized environment summary — print.anon_data_summary","text":"Displays anonymized environment summary structured, readable format. output includes overall statistics, data frame structural information, variable details, information objects (present).","code":""},{"path":"/reference/print.anon_data_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for anonymized environment summary — print.anon_data_summary","text":"","code":"# S3 method for class 'anon_data_summary' print(x, ...)"},{"path":"/reference/print.anon_data_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for anonymized environment summary — print.anon_data_summary","text":"x object class \"anon_data_summary\" created anon_data_summary() ... Additional arguments passed print methods (currently unused)","code":""},{"path":"/reference/print.anon_data_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for anonymized environment summary — print.anon_data_summary","text":"Invisibly returns input object x","code":""},{"path":"/reference/print.anon_data_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print method for anonymized environment summary — print.anon_data_summary","text":"print method displays information following order: Environment Data Summary: Overall statistics including total objects, data frame count, object count, total memory usage Data Frames: Structural information data frame Variable Details: Detailed information variables within data frames Objects: Information non-data frame objects displayed content respects anonymization patterns applied creation summary object.","code":""},{"path":"/reference/print.anon_data_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for anonymized environment summary — print.anon_data_summary","text":"","code":"if (FALSE) { # \\dontrun{ # Create and print an anonymized summary summary_result <- anon_data_summary(   list(data = mtcars),   pattern_list = list(\"CAR\" = \"Mazda|Merc\") ) print(summary_result) } # }"}]
