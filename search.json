[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 anon authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nash Delcamp. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Delcamp N (2025). anon: Anonymize Sensitive Data R Objects. R package version 0.0.0.9000.","code":"@Manual{,   title = {anon: Anonymize Sensitive Data in R Objects},   author = {Nash Delcamp},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"anon","dir":"","previous_headings":"","what":"Anonymize Sensitive Data in R Objects","title":"Anonymize Sensitive Data in R Objects","text":"goal anon anonymize sensitive information R objects including data frames, variable labels, lists, character/factor/numeric vectors.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Anonymize Sensitive Data in R Objects","text":"can install development version anon GitHub : Load :","code":"# install.packages(\"pak\") pak::pak(\"nash-delcamp-slp/anon\") library(anon)"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Anonymize Sensitive Data in R Objects","text":"examples demonstrate anonymization functions operate vectors. example demonstrates anonymize data frame anon(). check_approximate = TRUE, warnings reported approximate match detected. example demonstrates anon_data_summary() function summarizes data environment.","code":"anon_id_chr_sequence(c(\"John\", \"Paul\", \"John\", \"Keith\")) #> [1] \"ID 1\" \"ID 2\" \"ID 1\" \"ID 3\"  library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union data(\"starwars\", package = \"dplyr\") glimpse(starwars) #> Rows: 87 #> Columns: 14 #> $ name       <chr> \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or… #> $ height     <int> 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2… #> $ mass       <dbl> 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.… #> $ hair_color <chr> \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N… #> $ skin_color <chr> \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"… #> $ eye_color  <chr> \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",… #> $ birth_year <dbl> 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, … #> $ sex        <chr> \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",… #> $ gender     <chr> \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini… #> $ homeworld  <chr> \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T… #> $ species    <chr> \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma… #> $ films      <list> <\"A New Hope\", \"The Empire Strikes Back\", \"Return of the J… #> $ vehicles   <list> <\"Snowspeeder\", \"Imperial Speeder Bike\">, <>, <>, <>, \"Imp… #> $ starships  <list> <\"X-wing\", \"Imperial shuttle\">, <>, <>, \"TIE Advanced x1\",… anon_id_num_sequence(starwars$name) |>    head() #> [1] 1 2 3 4 5 6 anon_num_preserve_distribution(starwars$height) |>    head() #> [1] 183.0 174.0 138.0  66.0 189.5 177.5 anon_num_range(starwars$mass, n_breaks = 10) |>    head() #> [1] \"[0,100)\"   \"[0,100)\"   \"[0,100)\"   \"[100,200)\" \"[0,100)\"   \"[100,200)\" anon_starwars <- starwars |>    anon(     pattern_list = list(       DARK = c(\"empire\", \"imperials?\", \"sith\"),       LIGHT = c(\"jedi\", \"rebels?\")     ),     df_variable_names = list(       name = anon_id_chr_sequence,       homeworld = ~ anon_id_chr_sequence(.x, start = \"Planet \")     ),     df_classes = list(       integer = ~ anon_num_range(.x, n_breaks = 10),       numeric = anon_num_preserve_distribution     )   ) glimpse(anon_starwars) #> Rows: 87 #> Columns: 14 #> $ name       <chr> \"ID 01\", \"ID 02\", \"ID 03\", \"ID 04\", \"ID 05\", \"ID 06\", \"ID 0… #> $ height     <chr> \"[160,180)\", \"[160,180)\", \"[80,100)\", \"[200,220)\", \"[140,16… #> $ mass       <dbl> 88, 66, 57, 58, 136, 15, 66, 57, 80, 88, 80, NA, 77, 69, 90… #> $ hair_color <chr> \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N… #> $ skin_color <chr> \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"… #> $ eye_color  <chr> \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",… #> $ birth_year <dbl> 35.5, 200.0, 31.5, 43.0, 35.5, 73.0, 600.0, NA, 54.0, 22.0,… #> $ sex        <chr> \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",… #> $ gender     <chr> \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini… #> $ homeworld  <chr> \"Planet 01\", \"Planet 01\", \"Planet 02\", \"Planet 01\", \"Planet… #> $ species    <chr> \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma… #> $ films      <list> <\"A New Hope\", \"The DARK Strikes Back\", \"Return of the LIG… #> $ vehicles   <list> <\"Snowspeeder\", \"DARK Speeder Bike\">, <>, <>, <>, \"DARK Sp… #> $ starships  <list> <\"X-wing\", \"DARK shuttle\">, <>, <>, \"TIE Advanced x1\", <>,… starwars |>    anon(list(     \"blonde\", \"bleu\", \"imperials\"   )) |>    glimpse() #> Warning: Potential approximate match: 'blond' is similar to pattern 'blonde' #> • Potential approximate match: 'blue' is similar to pattern 'bleu' #> • Potential approximate match: 'Imperial Speeder Bike' is similar to pattern 'imperials' #> • Potential approximate match: 'Imperial shuttle' is similar to pattern 'imperials' #> Rows: 87 #> Columns: 14 #> $ name       <chr> \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or… #> $ height     <int> 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2… #> $ mass       <dbl> 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.… #> $ hair_color <chr> \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N… #> $ skin_color <chr> \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"… #> $ eye_color  <chr> \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",… #> $ birth_year <dbl> 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, … #> $ sex        <chr> \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",… #> $ gender     <chr> \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini… #> $ homeworld  <chr> \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T… #> $ species    <chr> \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma… #> $ films      <list> <\"A New Hope\", \"The Empire Strikes Back\", \"Return of the J… #> $ vehicles   <list> <\"Snowspeeder\", \"Imperial Speeder Bike\">, <>, <>, <>, \"Imp… #> $ starships  <list> <\"X-wing\", \"Imperial shuttle\">, <>, <>, \"TIE Advanced x1\",… anon_data_summary(   pattern_list = list(     DARK = c(\"empire\", \"imperials?\", \"sith\"),     LIGHT = c(\"jedi\", \"rebels?\")   ) ) #> Environment Data Summary #> ======================== #>  #>   total_objects data_frames other_objects total_memory #> 1             1           1             0        57440 #>  #> Data Frames: #> ------------ #>       name       type n_rows n_cols memory_size #> 1 starwars data.frame     87     14     56.1 Kb #>  #> Variable Details (starwars): #> --------------------------  #>      variable data_type n_distinct n_missing n_total pct_missing label #> 1        name character         87         0      87        0.00  <NA> #> 2      height   integer         45         6      87        6.90  <NA> #> 3        mass   numeric         38        28      87       32.18  <NA> #> 4  hair_color character         11         5      87        5.75  <NA> #> 5  skin_color character         31         0      87        0.00  <NA> #> 6   eye_color character         15         0      87        0.00  <NA> #> 7  birth_year   numeric         36        44      87       50.57  <NA> #> 8         sex character          4         4      87        4.60  <NA> #> 9      gender character          2         4      87        4.60  <NA> #> 10  homeworld character         48        10      87       11.49  <NA> #> 11    species character         37         4      87        4.60  <NA> #> 12      films      list         24         0      87        0.00  <NA> #> 13   vehicles      list         11         0      87        0.00  <NA> #> 14  starships      list         16         0      87        0.00  <NA>"},{"path":"/index.html","id":"default-options","dir":"","previous_headings":"","what":"Default Options","title":"Anonymize Sensitive Data in R Objects","text":"Default values can provided options() automatically include patterns variable rules use anon() anon_data_summary().","code":"options(   anon.pattern_list = list(     DARK = c(\"empire\", \"imperials?\", \"sith\"),     LIGHT = c(\"jedi\", \"rebels?\")   ),   anon.df_variable_names = list(     name = anon_id_chr_sequence,     homeworld = ~ anon_id_chr_sequence(.x, start = \"Planet \")   ),   anon.df_classes = list(     integer = ~ anon_num_range(.x, n_breaks = 10),     numeric = anon_num_preserve_distribution   ) ) c(   starwars = anon(starwars),   anon_data_summary() ) #> === ANONYMIZED DATA CONTEXT === #>  #> ---  starwars  --- #> # A tibble: 87 × 14 #>    name  height     mass hair_color skin_color eye_color birth_year sex   gender #>  * <chr> <chr>     <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  #>  1 ID 01 [160,180)   113 blond      fair       blue            53.5 male  mascu… #>  2 ID 02 [160,180)    48 <NA>       gold       yellow         600   none  mascu… #>  3 ID 03 [80,100)     82 <NA>       white, bl… red             52   none  mascu… #>  4 ID 04 [200,220)    76 none       white      yellow          43   male  mascu… #>  5 ID 05 [140,160)    40 brown      light      brown           53.5 fema… femin… #>  6 ID 06 [160,180)    80 brown, gr… light      blue            47   male  mascu… #>  7 ID 07 [160,180)    48 brown      light      blue           112   fema… femin… #>  8 ID 08 [80,100)     82 <NA>       white, red red             NA   none  mascu… #>  9 ID 09 [180,200)    85 black      light      brown           52   male  mascu… #> 10 ID 10 [180,200)   113 auburn, w… fair       blue-gray       19   male  mascu… #> # ℹ 77 more rows #> # ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>, #> #   vehicles <list>, starships <list> #>  #> Environment Data Summary #> ======================== #>  #>   total_objects data_frames other_objects total_memory #> 1             1           1             0        57440 #>  #> Data Frames: #> ------------ #>       name       type n_rows n_cols memory_size #> 1 starwars data.frame     87     14     56.1 Kb #>  #> Variable Details (starwars): #> --------------------------  #>      variable data_type n_distinct n_missing n_total pct_missing label #> 1        name character         87         0      87        0.00  <NA> #> 2      height   integer         45         6      87        6.90  <NA> #> 3        mass   numeric         38        28      87       32.18  <NA> #> 4  hair_color character         11         5      87        5.75  <NA> #> 5  skin_color character         31         0      87        0.00  <NA> #> 6   eye_color character         15         0      87        0.00  <NA> #> 7  birth_year   numeric         36        44      87       50.57  <NA> #> 8         sex character          4         4      87        4.60  <NA> #> 9      gender character          2         4      87        4.60  <NA> #> 10  homeworld character         48        10      87       11.49  <NA> #> 11    species character         37         4      87        4.60  <NA> #> 12      films      list         24         0      87        0.00  <NA> #> 13   vehicles      list         11         0      87        0.00  <NA> #> 14  starships      list         16         0      87        0.00  <NA>"},{"path":"/reference/anon.html","id":null,"dir":"Reference","previous_headings":"","what":"Anonymize sensitive information in R objects — anon","title":"Anonymize sensitive information in R objects — anon","text":"function anonymizes redacts sensitive information various R objects including character vectors, factors, data frames, lists. uses pattern matching find replace sensitive content, options targeted anonymization based variable names classes warnings approximate matches.","code":""},{"path":"/reference/anon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anonymize sensitive information in R objects — anon","text":"","code":"anon(   x,   pattern_list = list(),   default_replacement = \"**REDACTED**\",   check_approximate = TRUE,   max_distance = 2,   df_variable_names = NULL,   df_classes = NULL,   check_names = TRUE,   check_labels = TRUE,   .self = FALSE )"},{"path":"/reference/anon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anonymize sensitive information in R objects — anon","text":"x object anonymize. Can character vector, factor, data frame, list. pattern_list list patterns search replace. Can include: Named elements names replacement values values one patterns match Unnamed elements one patterns replaced default_replacement default_replacement Value use default replacement value specific replacement provided. Default \"**REDACTED**\". check_approximate Logical indicating whether check approximate matches using string distance. Default TRUE. max_distance Maximum string distance approximate matching check_approximate TRUE. Default 2. df_variable_names data frames, character vector named list specifying variable names anonymized: Unnamed elements: variables replaced default_replacement Named elements: variable names keys, value can either replacement value function df_classes data frames, character vector named list specifying variable classes anonymized: Unnamed elements: variables matching classes replaced default_replacement Named elements: class names keys, value can either replacement value function check_names Logical indicating whether anonymize object names (column names, row names, list names). Default TRUE. check_labels Logical indicating whether anonymize labels (attributes). Default TRUE. .self Logical internal use recursive calls. TRUE, warnings collected attributes instead issued immediately. Default FALSE.","code":""},{"path":"/reference/anon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Anonymize sensitive information in R objects — anon","text":"object class anon_context structure x sensitive information replaced. approximate matches found .self FALSE, warnings issued. .self TRUE, warnings attached attribute.","code":""},{"path":"/reference/anon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Anonymize sensitive information in R objects — anon","text":"anon() operates recursively nested structures. data frames: Individual columns processed based content Entire columns can replaced specified df_variable_names df_classes Column names, row names, labels anonymized enabled Pattern matching case-insensitive. check_approximate enabled, anon() warn remaining potential matches similar exact. Replacement functions can provided df_variable_names df_classes : R functions take column/variable input Formula notation (e.g., ~ .x + rnorm(length(.x), mean = 1)) returned object class anon_context allows combined anonymized objects using c().","code":""},{"path":"/reference/anon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anonymize sensitive information in R objects — anon","text":"","code":"# Basic string anonymization text <- c(\"John Smith\", \"jane.doe@email.com\", \"Call 555-1234\") anon(text, pattern_list = c(\"John Smith\", \"@\\\\S+\", \"\\\\d{3}-\\\\d{4}\")) #> [1] \"**REDACTED**\"         \"jane.doe**REDACTED**\" \"Call **REDACTED**\"     # Using named patterns for specific replacements anon(text, pattern_list = list(\"PERSON\" = \"John Smith\",                                \"EMAIL\" = \"@\\\\S+\",                                \"PHONE\" = \"\\\\d{3}-\\\\d{4}\")) #> [1] \"PERSON\"        \"jane.doeEMAIL\" \"Call PHONE\"     # Data frame anonymization df <- data.frame(   name = c(\"Alice\", \"Bob\"),   email = c(\"alice@test.com\", \"bob@test.com\"),   score = c(95, 87) )  # Anonymize specific columns by name anon(df, df_variable_names = c(\"name\", \"email\")) #>           name        email score #> 1 **REDACTED** **REDACTED**    95 #> 2 **REDACTED** **REDACTED**    87  # Anonymize columns by class with custom replacements anon(df, df_classes = list(\"character\" = \"HIDDEN\")) #>     name  email score #> 1 HIDDEN HIDDEN    95 #> 2 HIDDEN HIDDEN    87  # Using functions for dynamic replacement anon(df, df_variable_names = list(\"name\" = ~ paste(\"Person\", seq_along(.x)))) #>       name          email score #> 1 Person 1 alice@test.com    95 #> 2 Person 2   bob@test.com    87  anon_df <- df |>   anon(     df_variable_names = list(       \"name\" = ~ paste(\"Person\", seq_along(.x)),       \"email\"     )   )  # Combine anonymized objects anon_summary <- anon_data_summary(list(df = df)) combined <- c(anon_df, anon_summary) combined #> === ANONYMIZED DATA CONTEXT === #>  #>       name        email score #> 1 Person 1 **REDACTED**    95 #> 2 Person 2 **REDACTED**    87 #>  #> Environment Data Summary #> ======================== #>  #>   total_objects data_frames other_objects total_memory #> 1             1           1             0         1272 #>  #> Data Frames: #> ------------ #>   name       type n_rows n_cols memory_size #> 1   df data.frame      2      3      1.2 Kb #>  #> Variable Details (df): #> --------------------  #>   variable data_type n_distinct n_missing n_total pct_missing label #> 1     name character          2         0       2           0  <NA> #> 2    email character          2         0       2           0  <NA> #> 3    score   numeric          2         0       2           0  <NA> #>  #>  #>"},{"path":"/reference/anon_data_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate anonymized summary of data objects in an environment — anon_data_summary","title":"Generate anonymized summary of data objects in an environment — anon_data_summary","text":"function creates summary objects (primarily data frames) specified environment list, anonymizes results using pattern matching approach anon(). provides structural information data frames including dimensions, variable details, memory usage protecting sensitive information pattern-based redaction.","code":""},{"path":"/reference/anon_data_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate anonymized summary of data objects in an environment — anon_data_summary","text":"","code":"anon_data_summary(   envir = globalenv(),   pattern_list = list(),   default_replacement = \"**REDACTED**\",   check_approximate = TRUE,   max_distance = 2 )"},{"path":"/reference/anon_data_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate anonymized summary of data objects in an environment — anon_data_summary","text":"envir environment list containing objects summarize. passed list, unnamed elements automatically given names (either derived function call indexed \"x1\", \"x2\", etc.). Default globalenv(). pattern_list list patterns search replace. Can include: Named elements names replacement values values one patterns match Unnamed elements one patterns replaced default_replacement default_replacement Value use default replacement value specific replacement provided. Default \"**REDACTED**\". check_approximate Logical indicating whether check approximate matches using string distance. Default TRUE. max_distance Maximum string distance approximate matching check_approximate TRUE. Default 2.","code":""},{"path":"/reference/anon_data_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate anonymized summary of data objects in an environment — anon_data_summary","text":"object class \"anon_data_summary\" containing: $summary: tibble overall statistics (total objects, data frames count, objects count, total memory usage) $data_frames: list two elements (present data frames exist): $structure: tibble structural information data frame (name, label, dimensions, memory size) $variables: tibble detailed variable information including data types, missing values, distinct values, labels content anonymized according specified patterns","code":""},{"path":"/reference/anon_data_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate anonymized summary of data objects in an environment — anon_data_summary","text":"function operates key steps: Generates detailed summaries objects Creates structured output summary statistics detailed information data frames Applies anonymization using anon() provided patterns data frames, function captures: Structural information: dimensions, memory usage, data frame-level labels Variable details: data types, missing value counts, distinct value counts, variable labels output includes custom print method displays information readable format maintaining anonymization.","code":""},{"path":[]},{"path":"/reference/anon_data_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate anonymized summary of data objects in an environment — anon_data_summary","text":"","code":"# Create study data with sensitive study codes in variable names study_results <- data.frame(   participant_id = c(\"P001\", \"P002\", \"P003\"),   ABC123_RESULT = c(85.2, 92.1, 78.5),   ABC123_BASELINE = c(80.0, 88.3, 75.2),   CBA321_RESULT = c(45.1, 52.3, 41.8),   CBA321_BASELINE = c(42.0, 49.1, 39.5),   age = c(45, 32, 67) )  # Study metadata containing the same sensitive study codes as values study_metadata <- list(   primary_study = \"ABC123\",   secondary_study = \"CBA321\",   principal_investigator = \"Dr. Smith\",   site_location = \"Boston Medical Center\" )  # Create environment summary with anonymization env_list <- list(study_results = study_results, metadata = study_metadata)  # Use metadata values to inform anonymization patterns # This will anonymize both the variable names (ABC123_RESULT, CBA321_RESULT, etc.) # and the corresponding values in the metadata env_list |>   anon_data_summary(     pattern_list = list(       \"STUDY_A\" = study_metadata$primary_study,    # \"ABC123\"       \"STUDY_B\" = study_metadata$secondary_study,  # \"CBA321\"       \"MEDICAL_CENTER\" = \"Boston Medical Center\"     )   ) #> Environment Data Summary #> ======================== #>  #>   total_objects data_frames other_objects total_memory #> 1             2           1             1         2752 #>  #> Data Frames: #> ------------ #>            name       type n_rows n_cols memory_size #> 1 study_results data.frame      3      6      1.7 Kb #>  #> Variable Details (study_results): #> -------------------------------  #>           variable data_type n_distinct n_missing n_total pct_missing label #> 1   participant_id character          3         0       3           0  <NA> #> 2   STUDY_A_RESULT   numeric          3         0       3           0  <NA> #> 3 STUDY_A_BASELINE   numeric          3         0       3           0  <NA> #> 4   STUDY_B_RESULT   numeric          3         0       3           0  <NA> #> 5 STUDY_B_BASELINE   numeric          3         0       3           0  <NA> #> 6              age   numeric          3         0       3           0  <NA> #>  #>  #> Other Objects: #> -------------- #>       name type length element_types memory_size #> 1 metadata list      4     character        1 Kb"},{"path":"/reference/anon_date_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift dates to a new time period — anon_date_shift","title":"Shift dates to a new time period — anon_date_shift","text":"Shifts dates new time period preserving relative relationships dates. Supports Date POSIXct objects.","code":""},{"path":"/reference/anon_date_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift dates to a new time period — anon_date_shift","text":"","code":"anon_date_shift(x, center_date = Sys.Date(), scramble = FALSE)"},{"path":"/reference/anon_date_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift dates to a new time period — anon_date_shift","text":"x Date POSIXct vector anonymize center_date New center point date range (default: current date) scramble Logical, whether randomize assignment order generated results","code":""},{"path":"/reference/anon_date_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift dates to a new time period — anon_date_shift","text":"","code":"dates <- as.Date(c(\"2023-01-15\", \"2023-02-20\", \"2023-03-10\")) anon_date_shift(dates, center_date = \"2024-06-01\") #> [1] \"2024-05-02\" \"2024-06-07\" \"2024-06-25\""},{"path":"/reference/anon_email.html","id":null,"dir":"Reference","previous_headings":"","what":"Anonymize email addresses — anon_email","title":"Anonymize email addresses — anon_email","text":"Anonymizes email addresses replacing sequential fake emails.","code":""},{"path":"/reference/anon_email.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anonymize email addresses — anon_email","text":"","code":"anon_email(x, start = \"user\", domain = \"domain.com\")"},{"path":"/reference/anon_email.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anonymize email addresses — anon_email","text":"x character vector anonymize start Character prefix generated results (default: \"user\") domain Domain generated emails (default: \"domain.com\")","code":""},{"path":"/reference/anon_email.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anonymize email addresses — anon_email","text":"","code":"emails <- c(\"john@company.com\", \"not_an_email\", \"jane at work dot org\") anon_email(emails) #> [1] \"user001@domain.com\" \"not_an_email\"       \"user002@domain.com\""},{"path":"/reference/anon_id_chr_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert unique identifiers to sequential character IDs — anon_id_chr_sequence","title":"Convert unique identifiers to sequential character IDs — anon_id_chr_sequence","text":"Convert unique identifiers sequential character IDs","code":""},{"path":"/reference/anon_id_chr_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert unique identifiers to sequential character IDs — anon_id_chr_sequence","text":"","code":"anon_id_chr_sequence(   x,   scramble = FALSE,   start = \"ID \",   padding = TRUE,   padding_chr = \"0\" )"},{"path":"/reference/anon_id_chr_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert unique identifiers to sequential character IDs — anon_id_chr_sequence","text":"x vector anonymize scramble Logical, whether randomize assignment order generated results start Character prefix generated results (default: \"ID \") padding Logical, whether zero-pad numbers consistent width padding_chr Character used padding (default: \"0\")","code":""},{"path":"/reference/anon_id_chr_sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert unique identifiers to sequential character IDs — anon_id_chr_sequence","text":"","code":"ids <- c(\"A123\", \"B456\", \"A123\", \"C789\") anon_id_chr_sequence(ids) #> [1] \"ID 1\" \"ID 2\" \"ID 1\" \"ID 3\""},{"path":"/reference/anon_id_num_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert unique identifiers to sequential numeric IDs — anon_id_num_sequence","title":"Convert unique identifiers to sequential numeric IDs — anon_id_num_sequence","text":"Convert unique identifiers sequential numeric IDs","code":""},{"path":"/reference/anon_id_num_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert unique identifiers to sequential numeric IDs — anon_id_num_sequence","text":"","code":"anon_id_num_sequence(x, scramble = FALSE)"},{"path":"/reference/anon_id_num_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert unique identifiers to sequential numeric IDs — anon_id_num_sequence","text":"x vector anonymize scramble Logical, whether randomize assignment order generated results","code":""},{"path":"/reference/anon_nlp.html","id":null,"dir":"Reference","previous_headings":"","what":"Anonymize Named Entities in Text Using NLP — anon_nlp","title":"Anonymize Named Entities in Text Using NLP — anon_nlp","text":"functions use natural language processing identify anonymize different types named entities text. function combines NLP entity extraction pattern expansion anonymization.","code":""},{"path":"/reference/anon_nlp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anonymize Named Entities in Text Using NLP — anon_nlp","text":"","code":"anon_nlp_dates(x, ...)  anon_nlp_locations(x, ...)  anon_nlp_money(x, ...)  anon_nlp_organizations(x, ...)  anon_nlp_percentages(x, ...)  anon_nlp_people(x, ...)"},{"path":"/reference/anon_nlp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anonymize Named Entities in Text Using NLP — anon_nlp","text":"x character vector anonymize ... Additional arguments passed anon","code":""},{"path":"/reference/anon_nlp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Anonymize Named Entities in Text Using NLP — anon_nlp","text":"anonymized object class anon_context named entities replaced according anonymization workflow.","code":""},{"path":"/reference/anon_nlp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Anonymize Named Entities in Text Using NLP — anon_nlp","text":"functions follow three-step workflow: Use NLP extract potentially sensitive information specified type Extend patterns using more_patterns comprehensive matching Apply anon anonymize identified patterns Available entity types: anon_nlp_dates(): Anonymize dates anon_nlp_locations(): Anonymize geographic locations place names anon_nlp_money(): Anonymize monetary amounts currency expressions anon_nlp_organizations(): Anonymize organization company names anon_nlp_percentages(): Anonymize percentage expressions anon_nlp_people(): Anonymize person names","code":""},{"path":[]},{"path":"/reference/anon_nlp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anonymize Named Entities in Text Using NLP — anon_nlp","text":"","code":"text <- c(\"John Smith works at Microsoft in Seattle.\",           \"The deal was worth $1.2 million in 2023.\")  # Anonymize person names anon_nlp_people(text) #> [1] \"**REDACTED** works at Microsoft in Seattle.\" #> [2] \"The deal was worth $1.2 million in 2023.\"     # Anonymize organizations with custom replacement anon_nlp_organizations(text, default_replacement = \"[COMPANY]\") #> [1] \"John Smith works at [COMPANY] in Seattle.\" #> [2] \"The deal was worth $1.2 million in 2023.\""},{"path":"/reference/anon_num_preserve_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Anonymize numeric data while preserving distribution — anon_num_preserve_distribution","title":"Anonymize numeric data while preserving distribution — anon_num_preserve_distribution","text":"Anonymizes numeric data preserving distributional properties using various transformation methods.","code":""},{"path":"/reference/anon_num_preserve_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anonymize numeric data while preserving distribution — anon_num_preserve_distribution","text":"","code":"anon_num_preserve_distribution(   x,   method = c(\"rank\", \"noise\", \"quantile\"),   noise_sd = NULL,   quantile_dist_family = c(\"normal\", \"uniform\", \"exponential\") )"},{"path":"/reference/anon_num_preserve_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anonymize numeric data while preserving distribution — anon_num_preserve_distribution","text":"x numeric vector anonymize method Transformation method: \"rank\", \"noise\", \"quantile\" noise_sd Standard deviation noise method (used method = \"noise\") (default: NULL resulting standard deviation calculated) quantile_dist_family Distribution family quantile method: \"normal\", \"uniform\", \"exponential\" (used method = \"quantile\")","code":""},{"path":"/reference/anon_num_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numeric values into range categories — anon_num_range","title":"Convert numeric values into range categories — anon_num_range","text":"Converts numeric values range categories, either preserving actual ranges creating anonymized range labels.","code":""},{"path":"/reference/anon_num_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numeric values into range categories — anon_num_range","text":"","code":"anon_num_range(   x,   n_breaks = 5,   method = c(\"equal_width\", \"equal_count\"),   clean_breaks = TRUE,   scramble = FALSE,   keep_values = TRUE )"},{"path":"/reference/anon_num_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numeric values into range categories — anon_num_range","text":"x vector anonymize n_breaks Number range categories create (default: 5) method Method creating breaks: \"equal_width\" \"equal_count\" clean_breaks Logical, whether use pretty break points scramble Logical, whether randomize assignment order generated results keep_values Logical, whether keep actual range values use generic labels","code":""},{"path":"/reference/anon_num_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert numeric values into range categories — anon_num_range","text":"","code":"values <- c(150, 165, 180, 175, 160, 190) anon_num_range(values, n_breaks = 3) #> [1] \"[150,160)\" \"[160,170)\" \"[180,190]\" \"[170,180)\" \"[160,170)\" \"[180,190]\""},{"path":"/reference/anon_phone_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Anonymize phone numbers — anon_phone_number","title":"Anonymize phone numbers — anon_phone_number","text":"Anonymizes phone numbers sequential fake numbers.","code":""},{"path":"/reference/anon_phone_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anonymize phone numbers — anon_phone_number","text":"","code":"anon_phone_number(x)"},{"path":"/reference/anon_phone_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anonymize phone numbers — anon_phone_number","text":"x vector anonymize","code":""},{"path":"/reference/c.anon_context.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine anon_context objects — c.anon_context","title":"Combine anon_context objects — c.anon_context","text":"method allows combining multiple anonymized objects created anon() anon_data_summary() using c(). result maintains anonymized content provides print method suitable LLM context. additional header included printed output named elements.","code":""},{"path":"/reference/c.anon_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine anon_context objects — c.anon_context","text":"","code":"# S3 method for class 'anon_context' c(...)"},{"path":"/reference/c.anon_context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine anon_context objects — c.anon_context","text":"... anon_context objects combine","code":""},{"path":"/reference/c.anon_context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine anon_context objects — c.anon_context","text":"anon_context_collection object containing input objects","code":""},{"path":"/reference/c.anon_context.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine anon_context objects — c.anon_context","text":"","code":"df <- data.frame(name = c(\"John\", \"Jane\"), age = c(25, 30)) anon_df <- anon(df, pattern_list = c(\"John\", \"Jane\")) #> Warning: Potential approximate match: 'name' is similar to pattern 'Jane' summary_obj <- anon_data_summary(list(df = df)) combined <- c(anon_df, summary_obj) print(combined) #> === ANONYMIZED DATA CONTEXT === #>  #>           name age #> 1 **REDACTED**  25 #> 2 **REDACTED**  30 #>  #> Environment Data Summary #> ======================== #>  #>   total_objects data_frames other_objects total_memory #> 1             1           1             0          992 #>  #> Data Frames: #> ------------ #>   name       type n_rows n_cols memory_size #> 1   df data.frame      2      2   992 bytes #>  #> Variable Details (df): #> --------------------  #>   variable data_type n_distinct n_missing n_total pct_missing label #> 1     name character          2         0       2           0  <NA> #> 2      age   numeric          2         0       2           0  <NA> #>  #>  #>"},{"path":"/reference/more_patterns.html","id":null,"dir":"Reference","previous_headings":"","what":"Create expanded pattern vector for text matching — more_patterns","title":"Create expanded pattern vector for text matching — more_patterns","text":"Accepts character vector patterns returns expanded vector containing: Original items Patterns spaces replaced pattern number spaces one character words. Individual words item, split spaces punctuation","code":""},{"path":"/reference/more_patterns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create expanded pattern vector for text matching — more_patterns","text":"","code":"more_patterns(patterns)"},{"path":"/reference/more_patterns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create expanded pattern vector for text matching — more_patterns","text":"patterns Character vector patterns expand","code":""},{"path":"/reference/more_patterns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create expanded pattern vector for text matching — more_patterns","text":"Character vector original patterns, space-flexible patterns, individual words","code":""},{"path":"/reference/more_patterns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create expanded pattern vector for text matching — more_patterns","text":"intention order replace phrases replacements possible taking additional efforts anonymize sensitive information.","code":""},{"path":"/reference/more_patterns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create expanded pattern vector for text matching — more_patterns","text":"","code":"people <- c(\"John Smith\", \"Mary Jane Watson\") more_patterns(people) #> [1] \"John Smith\"                       \"Mary Jane Watson\"                 #> [3] \"John\\\\s*.\\\\s*Smith\"               \"Mary\\\\s*.\\\\s*Jane\\\\s*.\\\\s*Watson\" #> [5] \"John\"                             \"Smith\"                            #> [7] \"Mary\"                             \"Jane\"                             #> [9] \"Watson\""},{"path":"/reference/new_anon_context.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for anon_context objects — new_anon_context","title":"Constructor for anon_context objects — new_anon_context","text":"Constructor anon_context objects","code":""},{"path":"/reference/new_anon_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for anon_context objects — new_anon_context","text":"","code":"new_anon_context(x, ...)"},{"path":"/reference/new_anon_context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for anon_context objects — new_anon_context","text":"x object wrap anon_context class ... Additional attributes set","code":""},{"path":"/reference/new_anon_context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for anon_context objects — new_anon_context","text":"Object anon_context class","code":""},{"path":"/reference/nlp_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Named Entities from Text — nlp_get","title":"Extract Named Entities from Text — nlp_get","text":"functions extract different types named entities text using natural language processing. function specializes extracting specific type entity.","code":""},{"path":"/reference/nlp_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Named Entities from Text — nlp_get","text":"","code":"nlp_get_dates(x)  nlp_get_locations(x)  nlp_get_money(x)  nlp_get_organizations(x)  nlp_get_percentages(x)  nlp_get_people(x)"},{"path":"/reference/nlp_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Named Entities from Text — nlp_get","text":"x character vector","code":""},{"path":"/reference/nlp_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Named Entities from Text — nlp_get","text":"character vector unique extracted entities specified type. Returns empty character vector entities found processing fails.","code":""},{"path":"/reference/nlp_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract Named Entities from Text — nlp_get","text":"functions use OpenNLP's named entity recognition capabilities identify: nlp_get_dates(): Date expressions nlp_get_locations(): Geographic locations place names nlp_get_money(): Monetary amounts currency expressions nlp_get_organizations(): Organization company names nlp_get_percentages(): Percentage expressions nlp_get_people(): Person names functions handle missing values empty input gracefully. Text short contains alphabetic characters skipped.","code":""},{"path":[]},{"path":"/reference/nlp_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Named Entities from Text — nlp_get","text":"","code":"text <- c(\"John Smith works at Microsoft in Seattle.\",            \"The deal was worth $1.2 million in 2023.\")            nlp_get_people(text) #> [1] \"John Smith\" nlp_get_organizations(text) #> [1] \"Microsoft\" nlp_get_locations(text) #> [1] \"Seattle\" nlp_get_money(text) #> [1] \"\\\\$1\\\\.2 million\" nlp_get_dates(text) #> [1] \"2023\""},{"path":"/reference/print.anon_context.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for single anon_context objects — print.anon_context","title":"Print method for single anon_context objects — print.anon_context","text":"Print method single anon_context objects","code":""},{"path":"/reference/print.anon_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for single anon_context objects — print.anon_context","text":"","code":"# S3 method for class 'anon_context' print(x, ...)"},{"path":"/reference/print.anon_context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for single anon_context objects — print.anon_context","text":"x anon_context object ... Additional arguments passed NextMethod","code":""},{"path":"/reference/print.anon_context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for single anon_context objects — print.anon_context","text":"Invisibly returns x","code":""},{"path":"/reference/print.anon_context_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for anon_context_collection — print.anon_context_collection","title":"Print method for anon_context_collection — print.anon_context_collection","text":"Displays combined anonymized objects format suitable LLM prompts. object clearly delineated presented appropriate context.","code":""},{"path":"/reference/print.anon_context_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for anon_context_collection — print.anon_context_collection","text":"","code":"# S3 method for class 'anon_context_collection' print(x, ...)"},{"path":"/reference/print.anon_context_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for anon_context_collection — print.anon_context_collection","text":"x anon_context_collection object ... Additional arguments (currently unused)","code":""},{"path":"/reference/print.anon_context_collection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for anon_context_collection — print.anon_context_collection","text":"Invisibly returns x","code":""},{"path":"/reference/print.anon_data_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for anonymized environment summary — print.anon_data_summary","title":"Print method for anonymized environment summary — print.anon_data_summary","text":"Displays anonymized environment summary structured, readable format. output includes overall statistics, data frame structural information, variable details, information objects (present).","code":""},{"path":"/reference/print.anon_data_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for anonymized environment summary — print.anon_data_summary","text":"","code":"# S3 method for class 'anon_data_summary' print(x, ...)"},{"path":"/reference/print.anon_data_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for anonymized environment summary — print.anon_data_summary","text":"x object class \"anon_data_summary\" created anon_data_summary() ... Additional arguments passed print methods (currently unused)","code":""},{"path":"/reference/print.anon_data_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for anonymized environment summary — print.anon_data_summary","text":"Invisibly returns input object x","code":""},{"path":"/reference/print.anon_data_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print method for anonymized environment summary — print.anon_data_summary","text":"print method displays information following order: Environment Data Summary: Overall statistics including total objects, data frame count, object count, total memory usage Data Frames: Structural information data frame Variable Details: Detailed information variables within data frames Objects: Information non-data frame objects displayed content respects anonymization patterns applied creation summary object.","code":""},{"path":"/reference/print.anon_data_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for anonymized environment summary — print.anon_data_summary","text":"","code":"if (FALSE) { # \\dontrun{ # Create and print an anonymized summary summary_result <- anon_data_summary(   list(data = mtcars),   pattern_list = list(\"CAR\" = \"Mazda|Merc\") ) print(summary_result) } # }"}]
